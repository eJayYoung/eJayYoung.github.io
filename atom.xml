<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪庐</title>
  <subtitle>逸杰的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ejayyoung.github.io/"/>
  <updated>2017-12-01T15:10:20.591Z</updated>
  <id>ejayyoung.github.io/</id>
  
  <author>
    <name>eJay Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Router v4 版本 完全指北</title>
    <link href="ejayyoung.github.io/2017/12/01/React-Router-v4-%E7%89%88%E6%9C%AC-%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/"/>
    <id>ejayyoung.github.io/2017/12/01/React-Router-v4-版本-完全指北/</id>
    <published>2017-12-01T15:04:14.000Z</published>
    <updated>2017-12-01T15:10:20.591Z</updated>
    
    <content type="html"><![CDATA[<p>React Router v4 版本 极简入门<br><a id="more"></a></p>
<p><strong><a href="https://reacttraining.com/react-router/" target="_blank" rel="external">React Router</a> 已经成为“事实上”的React官方标准路由库。当你在一个多视图的React应用中来回切换，你需要一个路由来管理那些URL。React Router 专注于此，同步保持你应用的UI和URL。</strong></p>
<p>这个教程主要给你介绍React Router 的v4版本，以及你使用它可以做的大部分事情。</p>
<h2 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h2><p>React 是一个很流行的库，多用于创建在客户端渲染的单页应用(SPAs)。 一个SPA会有很多<strong>视图</strong>（也可以称为<strong>页面</strong>）,不像传统的多页应用，视图之间的跳转不应该导致整个页面被重新加载。相反，我们希望视图就在当前页面里渲染。那些习惯于多页应用的最终用户，期望在一个SPA中应该包含以下特性：</p>
<ul>
<li><p>应用中每个视图都应该有对应的唯一URL用来区分视图。以便用户可以在之后通过书签收藏的URL指向引用资源 - 例如：<code>www.example.com/products</code>。</p>
</li>
<li><p>浏览器的前进后退按钮应该正常工作。</p>
</li>
<li><p>动态生成的嵌套视图更应该有成对应的URL - 例如：<code>example.com/products/shoes/101</code>，101是产品id。</p>
</li>
</ul>
<p><strong>路由跳转</strong>是指在同步保持浏览器URL的过程中渲染页面中的视图。React Router 让你声明式的操作路由跳转。声明式路由方法，通过说“路由应该是这样的”，<span style="font-size: 1rem;">允许你控制应用中的数据流</span>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span>`</div></pre></td></tr></table></figure>
<p>你可以把<code>&lt;Route&gt;</code>组件放在任意你想要路由渲染的地方。由于我们所需要接触的<code>&lt;Route&gt;</code>,<code>&lt;Link&gt;</code>以及其他React Router的API都只是组件，所以你可以非常方便的在React里使用路由。</p>
<p>写在开头。有一个常见的误区，大家都认为React Router是由facebook官方开发的一个路由解决方案。实际上，它是一个因其设计和简易性而流行的第三方库。如果你的需求只局限于路由的跳转，你可以无需太多麻烦，就可以从头开始实现一个自定义的路由。但是，了解React Router的基础知识可以让你更清楚的认识一个路由是怎么工作的。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="http://p0.qhimg.com/t01fc32820c51696f31.jpg" alt="React Router Logo"></p>
<p>本次教程分为几个部分。首先，我们使用npm安装好React和React Router，然后我们就开始React Router的基础部分。你将会看到React Router不同的代码示例的效果。本次教程涉及的例子包含：</p>
<ol>
<li><p>基本路由跳转</p>
</li>
<li><p>嵌套路由</p>
</li>
<li><p>带路径参数的嵌套路由</p>
</li>
<li><p>保护式路由</p>
</li>
</ol>
<p>主要围绕构建这些路由所涉及的概念进行讨论。这个项目的全部代码在<a href="https://github.com/blizzerand/react-router-v4-demo" target="_blank" rel="external">这个Github仓库</a>可以看到。当你进入一个单独的demo目录，执行<code>npm install</code>来安装依赖。要在本地服务器上运行这个应用，执行<code>npm start</code>，然后在浏览器打开<code>http://localhost:3000/</code>可以看到运行的demo。</p>
<p>让我们开始吧！</p>
<h2 id="安装-React-Router"><a href="#安装-React-Router" class="headerlink" title="安装 React Router"></a>安装 React Router</h2><p>假设你已经有一个React开发环境并已经运行了。如果没有，可以跳转到<a href="https://www.sitepoint.com/getting-started-react-jsx/" target="_blank" rel="external">React和JSX入门</a>。或者，你可以使用<a href="https://www.sitepoint.com/create-react-app/" target="_blank" rel="external">Create React App</a>来生成创建一个基本的React项目所需要的文件。这是Create React App生成的默认目录结构：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">react-routing-demo-v4</div><div class="line">   ├── .gitignore</div><div class="line">   ├── package.json</div><div class="line">   ├── public</div><div class="line">   │   ├── favicon.ico</div><div class="line">   │   ├── index.html</div><div class="line">   │   └── manifest.json</div><div class="line">   ├── README.md</div><div class="line">   ├── src</div><div class="line">   │   ├── App.css</div><div class="line">   │   ├── App.js</div><div class="line">   │   ├── App<span class="selector-class">.test</span><span class="selector-class">.js</span></div><div class="line">   │   ├── index.css</div><div class="line">   │   ├── index.js</div><div class="line">   │   ├── logo.svg</div><div class="line">   │   └── registerServiceWorker.js</div><div class="line">   └── yarn.lock</div></pre></td></tr></table></figure>
<p>React Router库包含三个包： <code>react-router</code>, <code>react-router-dom</code>, 和 <code>react-router-native</code>。<code>react-router</code>是路由的核心包，而其他两个是基于特定环境的。如果你在开发一个网站，你应该使用<code>react-router-dom</code>，如果你在移动应用的开发环境使用React Native，你应该使用<code>react-router-native</code>。</p>
<p>使用npm安装<code>react-router-dom</code>：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`npm install --save react-router-dom`</div></pre></td></tr></table></figure>
<h2 id="React-Router-基础"><a href="#React-Router-基础" class="headerlink" title="React Router 基础"></a>React Router 基础</h2><p>下面是路由的例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/category"</span> <span class="attr">component</span>=<span class="string">&#123;Category&#125;/</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/login"</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;/</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/products"</span> <span class="attr">component</span>=<span class="string">&#123;Products&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><p>像上面的例子，你需要一个<code>&lt;Router&gt;</code>组件和一些<code>&lt;Route&gt;</code>组件来创建一个基本的路由。由于我们创建的是一个基于浏览器的应用，我们可以从React Router API中使用这两种类型的路由：</p>
<ol>
<li><p><code>&lt;BrowserRouter&gt;</code></p>
</li>
<li><p><code>&lt;HashRouter&gt;</code></p>
</li>
</ol>
<p>它们之间主要的区别，可以在它们所创建的URL明显看出：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;BrowserRouter&gt;</span></div><div class="line"><span class="symbol">http:</span><span class="comment">//example.com/about</span></div><div class="line"></div><div class="line"><span class="comment">// &lt;HashRouter&gt;</span></div><div class="line"><span class="symbol">http:</span><span class="comment">//example.com/#/about</span></div></pre></td></tr></table></figure>
<p><code>&lt;BrowserRouter&gt;</code>在两者中更为常用，原因是它使用了HTML5的history API来记录你的路由历史。而<code>&lt;HashRouter&gt;</code>则使用URL(<code>window.location.hash</code>)的hash部分来记录。如果你想兼容老式浏览器，你应该使用<code>&lt;HashRouter&gt;</code>。</p>
<p>使用<code>&lt;BrowserRouter&gt;</code>组件包裹App组件。</p>
<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Import statements */</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* App is the entry point to the React code.*/</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* import BrowserRouter from 'react-router-dom' */</span></div><div class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;BrowserRouter&gt;</div><div class="line">        &lt;App /&gt;</div><div class="line">    &lt;<span class="regexp">/BrowserRouter&gt;</span></div><div class="line"><span class="regexp">    , document.getElementById('root'));</span></div></pre></td></tr></table></figure>
<p>注意：Router组件只能有一个子元素。子元素可以是HTML - 例如div - 也可以是一个react组件。</p>
<p>要让React Router工作，你需要从<code>react-router-dom</code>库引入相关的API。这里，我在<code>index.js</code>引入了<code>BrowserRouter</code>，也从<code>App.js</code>引入了<code>App</code>组件。<code>App.js</code>，如你所猜想的，是React组件的入口。</p>
<p>上述代码给我们整个App组件创建了一个history实例。接下来正式介绍下history。</p>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><blockquote>
<p><code>history</code>是一个让你轻松管理所有Javascript运行的会话记录的Javascript库。history提供了简洁的API，让你可以管理history堆栈，跳转，确认跳转，以及保持会话之间的状态。 - 来自<a href="https://github.com/ReactTraining/history" target="_blank" rel="external">React 培训文档</a></p>
</blockquote>
<p>每个router组件创建了一个history对象，用来记录当前路径(<code>history.location</code>)，上一步路径也存储在堆栈中。当前路径改变时，视图会重新渲染，给你一种跳转的感觉。当前路径又是如何改变的呢？history对象有<code>history.push()</code>和<code>history.replace()</code>这些方法来实现。当你点击<code>&lt;Link&gt;</code>组件会触发<code>history.push()</code>，使用<code>&lt;Redirect&gt;</code>则会调用<code>history.replace()</code>。其他方法 - 例如<code>history.goBack()</code>和<code>history.goForward()</code> - 用来根据页面的后退和前进来跳转history堆栈。</p>
<p>接下来，我们谈谈Links和Routes</p>
<h3 id="Links-and-Routes"><a href="#Links-and-Routes" class="headerlink" title="Links and Routes"></a>Links and Routes</h3><p><code>&lt;Route&gt;</code>是React Router里最重要的组件。若当前路径匹配route的路径，它会渲染对应的UI。理想来说，<code>&lt;Route&gt;</code>应该有一个叫<code>path</code>的prop，当路径名跟当前路径匹配才会渲染。</p>
<p>另一方面，<code>&lt;Link&gt;</code>用来跳转页面。可以类比HTML的锚元素。然而，使用锚链接会导致浏览器的刷新，这不是我们想要的。所以，我们可以使用<code>&lt;Link&gt;</code>来跳转至具体的URL，并且视图重新渲染不会导致浏览器刷新。</p>
<p>我们已经介绍了创建一个基本的路由需要的所有东西。让我们试一个吧。</p>
<h3 id="Demo-1-基础路由"><a href="#Demo-1-基础路由" class="headerlink" title="Demo 1: 基础路由"></a>Demo 1: 基础路由</h3><h4 id="src-App-js"><a href="#src-App-js" class="headerlink" title="src/App.js"></a>src/App.js</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">/* Import statements */</div><div class="line">import React, &#123; Component &#125; from 'react';</div><div class="line">import &#123; Link, Route, Switch &#125; from 'react-router-dom';</div><div class="line"></div><div class="line">/* Home component */</div><div class="line">const Home = () =&gt; (</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line"></div><div class="line">/* Category component */</div><div class="line">const Category = () =&gt; (</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Category<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line"></div><div class="line">/* Products component */</div><div class="line">const Products = () =&gt; (</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line"></div><div class="line">/* App component */</div><div class="line">class App extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">"navbar navbar-light"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line"></div><div class="line">           /* Link components are used for linking to other views */</div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Homes<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/category"</span>&gt;</span>Category<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"></div><div class="line">          /* Route components are rendered if the path prop matches the current URL */</div><div class="line">           <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/category"</span> <span class="attr">component</span>=<span class="string">&#123;Category&#125;/</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/products"</span> <span class="attr">component</span>=<span class="string">&#123;Products&#125;/</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在<code>App.js</code>里定义了 Home，Category，和Products组件。尽管目前看起来没问题，当组件变得越来越臃肿，最好将每个组件分成单独的文件。根据经验，如果组件代码超过了10行，我通常会给它创建一个新的文件。从第二个demo开始，我会将<code>App.js</code>里面越来越多的组件分成单独的文件。</p>
<p>在App组件中，我们写了路由跳转的逻辑。 <code>&lt;Route&gt;</code>的路径与当前路径匹配，对应组件就会被渲染。对应渲染的组件传给了第二个prop–<code>component</code>。</p>
<p>在这里，<code>/</code>同时匹配<code>/</code>和<code>/category</code>。因此，所有路由都匹配并被渲染。我们该如何避免呢？应该给 <code>path=&#39;/&#39;</code>的路由传递<code>exact= {true}</code>props：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`<span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span>`</div></pre></td></tr></table></figure>
<p>若只想要路由在路径完全相同时渲染，你就可以使用<code>exact</code>props。</p>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>创建嵌套路由之前，我们需要更深入的理解<code>&lt;Route&gt;</code>如何运行。开始吧。</p>
<p><code>&lt;Route&gt;</code>有三个可以用来定义要渲染内容的props：</p>
<ul>
<li><p><strong>component</strong>.在上面我们已经看到了。当URL匹配时，router会将传递的组件使用<code>React.createElement</code>来生成一个React元素。</p>
</li>
<li><p><strong>render</strong>. 适合行内渲染。在当前路径匹配路由路径时，<code>render</code>prop期望一个函数返回一个元素。</p>
</li>
<li><p><strong>children</strong>.<code>children</code>prop跟<code>render</code>很类似，也期望一个函数返回一个React元素。然而，不管路径是否匹配，children都会渲染。</p>
</li>
</ul>
<h3 id="Path-and-match"><a href="#Path-and-match" class="headerlink" title="Path and match"></a>Path and match</h3><p><strong>path</strong>用来标识路由匹配的URL部分。React Router使用了Path-to-RegExp库将路径字符串转为正则表达式。然后正则表达式会匹配当前路径。</p>
<p>当路由路径和当前路径成功匹配，会生成一个对象，我们叫它<strong>match</strong>。match对象有更多关于URL和path的信息。这些信息可以通过它的属性获取，如下所示：</p>
<ul>
<li><p><code>match.url</code>.返回URL匹配部分的字符串。对于创建嵌套的<code>&lt;Link&gt;</code>很有用。</p>
</li>
<li><p><code>match.path</code>.返回路由路径字符串 - 就是<code>&lt;Route path=&quot;&quot;&gt;</code>。将用来创建嵌套的<code>&lt;Route&gt;</code>。</p>
</li>
<li><p><code>match.isExact</code>.返回布尔值，如果准确（没有任何多余字符）匹配则返回true。</p>
</li>
<li><p><code>match.params</code>.返回一个对象包含Path-to-RegExp包从URL解析的键值对。</p>
</li>
</ul>
<p>现在我们完全了解了<code>&lt;Route&gt;</code>，开始创建一个嵌套路由吧。</p>
<h3 id="Switch组件"><a href="#Switch组件" class="headerlink" title="Switch组件"></a>Switch组件</h3><p>在我们开始示例代码签，我想给你介绍下<code>&lt;Switch&gt;</code>组件。当一起使用多个<code>&lt;Route&gt;</code>时，所有匹配的routes都会被渲染。根据demo1的代码，我添加一个新的route来验证为什么<code>&lt;Switch&gt;</code>很有用。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/products"</span> <span class="attr">component</span>=<span class="string">&#123;Products&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/category"</span> <span class="attr">component</span>=<span class="string">&#123;Category&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/:id"</span> <span class="attr">render</span> = <span class="string">&#123;()</span>=&gt;</span> (<span class="tag">&lt;<span class="name">p</span>&gt;</span> I want this text to show up for all routes other than '/', '/products' and '/category' <span class="tag">&lt;/<span class="name">p</span>&gt;</span>)&#125;/&gt;</div></pre></td></tr></table></figure>
<p>当URL为<code>/products</code>，所有匹配<code>/products</code>路径的route都会被渲染。所以，那个path为<code>：id</code>的<code>&lt;Route&gt;</code>会跟着<code>Products</code>组件一块渲染。设计就是如此。但是，若这不是你想要的结果，你应该给你的routes添加<code>&lt;Switch&gt;</code>组件。有<code>&lt;Switch&gt;</code>组件的话，只有第一个匹配路径的子<code>&lt;Route&gt;</code>会渲染。</p>
<h3 id="Demo-2-嵌套路由"><a href="#Demo-2-嵌套路由" class="headerlink" title="Demo 2: 嵌套路由"></a>Demo 2: 嵌套路由</h3><p>之前，我们给<code>/</code>, <code>/category</code> and <code>/products</code>创建了路由。但如果我们想要<code>/category/shoes</code>这种形式的URL呢？</p>
<h4 id="src-App-js-1"><a href="#src-App-js-1" class="headerlink" title="src/App.js"></a>src/App.js</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from 'react';</div><div class="line">import &#123; Link, Route, Switch &#125; from 'react-router-dom';</div><div class="line">import Category from './Category';</div><div class="line"></div><div class="line">class App extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line"></div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">"navbar navbar-light"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Homes<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/category"</span>&gt;</span>Category<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/category"</span> <span class="attr">component</span>=<span class="string">&#123;Category&#125;/</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/products"</span> <span class="attr">component</span>=<span class="string">&#123;Products&#125;/</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export default App;</div><div class="line"></div><div class="line">/* Code for Home and Products component omitted for brevity */</div></pre></td></tr></table></figure>
<p>不像React Router之前的版本，在版本4中，嵌套的<code>&lt;Route&gt;</code>最好放在父元素里面。所以，Category组件就是这里的父组件，我们将在父组件中定义<code>category/:name</code>路由。</p>
<h4 id="src-Category-jsx"><a href="#src-Category-jsx" class="headerlink" title="src/Category.jsx"></a>src/Category.jsx</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Link, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Category = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> &#123;</div><div class="line"><span class="keyword">return</span>( &lt;div&gt; &lt;ul&gt;</div><div class="line">    &lt;li&gt;&lt;Link to=&#123;`$&#123;match.url&#125;/shoes`&#125;&gt;Shoes&lt;/Link&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;Link to=&#123;`$&#123;match.url&#125;/boots`&#125;&gt;Boots&lt;/Link&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;Link to=&#123;`$&#123;match.url&#125;/footwear`&#125;&gt;Footwear&lt;/Link&gt;&lt;/li&gt;</div><div class="line"></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">  &lt;Route path=&#123;`$&#123;match.path&#125;/:name`&#125; render= &#123;(&#123;match&#125;) =&gt;( &lt;div&gt; &lt;h3&gt; &#123;match.params.name&#125; &lt;/h3&gt;&lt;/div&gt;)&#125;/&gt;</div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>)</span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml">export default Category;</span></div></pre></td></tr></table></figure>
<p>首先，我们给嵌套路由定义了一些Link。之前提到过，<code>match.url</code>用来构建嵌套链接，<code>match.path</code>用来构建嵌套路由。如果你对match有不理解的概念，<code>console.log(match)</code>会提供一些有用的信息来帮助你了解它。</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=</span></span><span class="template-variable">&#123;`$&#123;match.path&#125;</span><span class="xml"><span class="tag">/<span class="attr">:name</span>`&#125;</span></span></div><div class="line"><span class="xml">  render= </span><span class="template-variable">&#123;(&#123;match&#125;</span><span class="xml">) =&gt;( <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">h3</span>&gt;</span> </span><span class="template-variable">&#123;match.params.name&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>)&#125;/&gt;</span></div></pre></td></tr></table></figure>
<p>这是我们首次尝试动态路由。不同于硬编码路由，我们给pathname使用了变量。<code>:name</code>是路径参数，获取<code>category/</code>之后到下一条斜杠之间的所有内容。所以，类似<code>products/running-shoes</code>的路径名会生成如下的一个<code>params</code>对象：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">name</span>: <span class="string">'running-shoes'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参数可以通过<code>match.params</code>或<code>props.match.params</code>来获取，取决于传递哪种props。另外有趣的是我们使用了<code>render</code>prop。<code>render</code> props非常适合行内函数，这样不需要单独拆分组件。</p>
<h3 id="Demo-3-带Path参数的嵌套路由"><a href="#Demo-3-带Path参数的嵌套路由" class="headerlink" title="Demo 3: 带Path参数的嵌套路由"></a>Demo 3: 带Path参数的嵌套路由</h3><p>我们让事情变得再复杂一些，可以吗？一个真实的路由应该是根据数据，然后动态展示。假设我们获取了从服务端API返回的product数据，如下所示。</p>
<h4 id="src-Products-jsx"><a href="#src-Products-jsx" class="headerlink" title="src/Products.jsx"></a>src/Products.jsx</h4><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> productData = [</div><div class="line">&#123;</div><div class="line">  <span class="attribute">id:</span><span class="string"> 1,</span></div><div class="line"><span class="string">  name</span>: <span class="string">'NIKE Liteforce Blue Sneakers'</span>,</div><div class="line">  <span class="attribute">description</span>: <span class="string">'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin molestie.'</span>,</div><div class="line">  <span class="attribute">status</span>: <span class="string">'Available'</span></div><div class="line"></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  <span class="attribute">id:</span><span class="string"> 2,</span></div><div class="line"><span class="string">  name</span>: <span class="string">'Stylised Flip Flops and Slippers'</span>,</div><div class="line">  <span class="attribute">description</span>: <span class="string">'Mauris finibus, massa eu tempor volutpat, magna dolor euismod dolor.'</span>,</div><div class="line">  <span class="attribute">status</span>: <span class="string">'Out of Stock'</span></div><div class="line"></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  <span class="attribute">id:</span><span class="string"> 3,</span></div><div class="line"><span class="string">  name</span>: <span class="string">'ADIDAS Adispree Running Shoes'</span>,</div><div class="line">  <span class="attribute">description</span>: <span class="string">'Maecenas condimentum porttitor auctor. Maecenas viverra fringilla felis, eu pretium.'</span>,</div><div class="line">  <span class="attribute">status</span>: <span class="string">'Available'</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  <span class="attribute">id:</span><span class="string"> 4,</span></div><div class="line"><span class="string">  name</span>: <span class="string">'ADIDAS Mid Sneakers'</span>,</div><div class="line">  <span class="attribute">description</span>: <span class="string">'Ut hendrerit venenatis lacus, vel lacinia ipsum fermentum vel. Cras.'</span>,</div><div class="line">  <span class="attribute">status</span>: <span class="string">'Out of Stock'</span></div><div class="line">&#125;,</div><div class="line"></div><div class="line">];</div></pre></td></tr></table></figure>
<p>我们需要根据下面这些路径创建路由：</p>
<ul>
<li><p><code>/products</code>. 这个路径应该展示产品列表。</p>
</li>
<li><p><code>/products/:productId</code>.如果产品有<code>:productId</code>，这个页面应该展示该产品的数据，如果没有，就该展示一个错误信息。</p>
</li>
</ul>
<h4 id="src-Products-jsx-1"><a href="#src-Products-jsx-1" class="headerlink" title="src/Products.jsx"></a>src/Products.jsx</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="xml">/* Import statements have been left out for code brevity */</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">const Products = (</span><span class="template-variable">&#123; match &#125;</span><span class="xml">) =&gt; </span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable"></span></div><div class="line"><span class="template-variable">   const productsData = [</span></div><div class="line"><span class="template-variable">    &#123;</span></div><div class="line"><span class="template-variable">        id: 1,</span></div><div class="line"><span class="template-variable">        name: 'NIKE Liteforce Blue Sneakers',</span></div><div class="line"><span class="template-variable">        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin molestie.',</span></div><div class="line"><span class="template-variable">        status: 'Available'</span></div><div class="line"><span class="template-variable"></span></div><div class="line"><span class="template-variable">    &#125;</span><span class="xml">,</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">    //Rest of the data has been left out for code brevity</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">];</span></div><div class="line"><span class="xml"> /* Create an array of `<span class="tag">&lt;<span class="name">li</span>&gt;</span>` items for each product</span></div><div class="line"><span class="xml">  var linkList = productsData.map( (product) =&gt; </span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">    return(</span></div><div class="line"><span class="template-variable">      &lt;li&gt;</span></div><div class="line"><span class="template-variable">        &lt;Link to=&#123;`$&#123;match.url&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;product.id&#125;</span><span class="xml">`&#125;&gt;</span></div><div class="line"><span class="xml">          </span><span class="template-variable">&#123;product.name&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml">      )</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">    &#125;)</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">  return(</span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">           <span class="tag">&lt;<span class="name">h3</span>&gt;</span> Products<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></div><div class="line"><span class="xml">           <span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><span class="template-variable">&#123;linkList&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=</span></span><span class="template-variable">&#123;`$&#123;match.url&#125;</span><span class="xml"><span class="tag">/<span class="attr">:productId</span>`&#125;</span></span></div><div class="line"><span class="xml">            render=</span><span class="template-variable">&#123; (props) =&gt; &lt;Product data= &#123;productsData&#125;</span><span class="xml"> </span><span class="template-variable">&#123;...props&#125;</span><span class="xml"> /&gt;&#125;/&gt;</span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=</span></span><span class="template-variable">&#123;match.url&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line"><span class="xml">            render=</span><span class="template-variable">&#123;() =&gt; (</span></div><div class="line"><span class="template-variable">            &lt;div&gt;Please <span class="keyword">select</span> a product.&lt;/div&gt;</span></div><div class="line"><span class="template-variable">            )&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">        /&gt;</span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">  )</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure>
<p>首先，我们通过<code>productsData.id</code>创建一列<code>&lt;Links&gt;</code>，并把它存储在<code>linkList</code>。路由从路径字符串根据匹配的对应产品id获取参数。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">match.url</span>&#125;/<span class="attr">:productId</span>`&#125;</span></div><div class="line"><span class="tag">  <span class="attr">render</span>=<span class="string">&#123;</span> (<span class="attr">props</span>) =&gt;</span> <span class="tag">&lt;<span class="name">Product</span> <span class="attr">data</span>= <span class="string">&#123;productsData&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;/&gt;</div></pre></td></tr></table></figure>
<p>你可能期望使用<code>component = { Product }</code>来替代行内render函数。问题是，我们不仅需要<code>productsData</code>，并顺带把剩余prop也传给Product组件。尽管你还有其他方法，不过我觉的这是最简单的方法了。<code>{...props}</code>使用ES6的<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="external">扩展运算符</a> 将所有prop传给组件。</p>
<p>这是Product组件的代码。</p>
<h4 id="src-Product-jsx"><a href="#src-Product-jsx" class="headerlink" title="src/Product.jsx"></a>src/Product.jsx</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Import statements have been left out for code brevity */</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Product = <span class="function">(<span class="params">&#123;match,data&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">var</span> product= data.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id == match.params.productId);</div><div class="line">  <span class="keyword">var</span> productData;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(product)</div><div class="line">    productData = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span> &#123;product.name&#125; <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;product.description&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;product.status&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    productData = <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> Sorry. Product doesnt exist <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;div&gt;</div><div class="line">         &#123;productData&#125;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>find</code>方法用来查找数组中对象的id属性等于<code>match.params.productId</code>。如果product存在，<code>productData</code>就会展示，如果不存在，“Product不存在”的信息就会被渲染。</p>
<h2 id="保护式路由"><a href="#保护式路由" class="headerlink" title="保护式路由"></a>保护式路由</h2><p>最后一个demo，我们将围绕保护式路由的技术进行讨论。那么，如果有人想进入<code>/admin</code>页面，他们会被要求先登录。然而，在我们保护路由之前还需要考虑一些事情。</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>类似服务端重定向，<code>&lt;Redirect&gt;</code>会将history堆栈的当前路径替换为新路径。新路径通过<code>to</code>prop传递。这是如何使用<code>&lt;Redirect&gt;</code>：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;Redirect <span class="keyword">to</span>=&#123;&#123;pathname: <span class="string">'/login'</span>, state: &#123;from: props.location&#125;&#125;&#125;`</div></pre></td></tr></table></figure>
<p>如果有人已经注销了账户，想进入<code>/admin</code>页面，他们会被重定向到<code>/login</code>页面。当前路径的信息是通过state传递的，若用户信息验证成功，用户会被重定向回初始路径。在子组件中，你可以通过<code>this.props.location.state</code>获取state的信息。</p>
<h3 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h3><p>自定义路由最适合描述组件里嵌套的路由。如果我们需要确定一个路由是否应该渲染，最好的方法是写个自定义组件。下面是通过其他路由来定义自定义路由。</p>
<h4 id="src-App-js-2"><a href="#src-App-js-2" class="headerlink" title="src/App.js"></a>src/App.js</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/* Add the PrivateRoute component to the existing Routes */</div><div class="line"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;/</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/category"</span> <span class="attr">component</span>=<span class="string">&#123;Category&#125;/</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/login"</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;/</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">PrivateRoute</span> <span class="attr">authed</span>=<span class="string">&#123;fakeAuth.isAuthenticated&#125;</span> <span class="attr">path</span>=<span class="string">'/products'</span> <span class="attr">component</span> = <span class="string">&#123;Products&#125;</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若用户已登录，<code>fakeAuth.isAuthenticated</code>返回true，反之亦然。</p>
<p>这是PrivateRoute的定义。</p>
<h4 id="src-App-js-3"><a href="#src-App-js-3" class="headerlink" title="src/App.js"></a>src/App.js</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* PrivateRoute component definition */</span></div><div class="line">const PrivateRoute = (&#123;<span class="string">component:</span> Component, authed, ...rest&#125;) =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;Route</div><div class="line">      &#123;...rest&#125;</div><div class="line">      render=&#123;(props) =&gt; authed === <span class="literal">true</span></div><div class="line">        ? &lt;Component &#123;...props&#125; /&gt;</div><div class="line">        : &lt;Redirect to=&#123;&#123;<span class="string">pathname:</span> <span class="string">'/login'</span>, <span class="string">state:</span> &#123;<span class="string">from:</span> props.location&#125;&#125;&#125; <span class="regexp">/&gt;&#125; /</span>&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果用户已登录，路由将渲染Admin组件。否则，用户将重定义到 <code>/login</code>登录页面。这样做的好处是，定义更明确，而且<code>PrivateRoute</code>可以复用。</p>
<p>最后，下面是Login组件的代码：</p>
<h4 id="src-Login-jsx"><a href="#src-Login-jsx" class="headerlink" title="src/Login.jsx"></a>src/Login.jsx</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      redirectToReferrer: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// binding 'this'</span></div><div class="line">    <span class="keyword">this</span>.login = <span class="keyword">this</span>.login.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  login() &#123;</div><div class="line"></div><div class="line">    fakeAuth.authenticate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">redirectToReferrer</span>: <span class="literal">true</span> &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; <span class="keyword">from</span> &#125; = <span class="keyword">this</span>.props.location.state || &#123; <span class="attr">from</span>: &#123; <span class="attr">pathname</span>: <span class="string">'/'</span> &#125; &#125;</div><div class="line">    <span class="keyword">const</span> &#123; redirectToReferrer &#125; = <span class="keyword">this</span>.state;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (redirectToReferrer) &#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        &lt;Redirect to=&#123;<span class="keyword">from</span>&#125; /&gt;</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;p&gt;You must log <span class="keyword">in</span> to view the page at &#123;<span class="keyword">from</span>.pathname&#125;&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">        &lt;button onClick=&#123;this.login&#125;&gt;Log in&lt;/</span>button&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span>* A fake authentication <span class="function"><span class="keyword">function</span> */</span></div><div class="line"><span class="function"><span class="title">export</span> <span class="title">const</span> <span class="title">fakeAuth</span> = </span>&#123;</div><div class="line"></div><div class="line">  isAuthenticated: <span class="literal">false</span>,</div><div class="line">  authenticate(cb) &#123;</div><div class="line">    <span class="keyword">this</span>.isAuthenticated = <span class="literal">true</span></div><div class="line">     setTimeout(cb, <span class="number">100</span>)</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面这行是<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external">对象的解构赋值</a>的示例，es6的特性之一。</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`const &#123; <span class="keyword">from</span> &#125; = this.props.location.<span class="keyword">state</span> || &#123; <span class="keyword">from</span>: &#123; pathname: '/' &#125; &#125;`</div></pre></td></tr></table></figure>
<p>让我们把所有片段拼凑到一块，好吗？这是我们使用React Router创建的应用最终效果：</p>
<h3 id="Demo-4-保护式路由"><a href="#Demo-4-保护式路由" class="headerlink" title="Demo 4: 保护式路由"></a>Demo 4: 保护式路由</h3><p><a href="https://codesandbox.io/s/nn8x24vm60?from-embed" target="_blank" rel="external">点击此查看在线demo</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如你在本文中所看到的，React Router是一个帮助React构建更完美，更声明式的路由库。不像React Router之前的版本，在v4中，一切就“只是组件”。而且，新的设计模式也更完美的使用React的构建方式来实现。</p>
<p>在本次教程中，我们学到了：</p>
<ul>
<li><p>如何配置和安装React Router</p>
</li>
<li><p>基础版路由，和一些基础组件，例如<code>&lt;Router&gt;</code>, <code>&lt;Route&gt;</code>和<code>&lt;Link&gt;</code></p>
</li>
<li><p>如何构建一个有导航功能的极简路由和嵌套路由</p>
</li>
<li><p>如何根据路径参数构建动态路由</p>
</li>
</ul>
<p>最后，我们还学习了一些高级路由技巧，用来创建保护式路由的最终demo。</p>
<p>感谢作者： <a href="https://www.sitepoint.com/author/manjunathm/" target="_blank" rel="external">Manjunath M</a><br><a href="https://github.com/blizzerand" target="_blank" rel="external"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Router v4 版本 极简入门&lt;br&gt;
    
    </summary>
    
      <category term="翻译" scheme="ejayyoung.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React Router" scheme="ejayyoung.github.io/tags/React-Router/"/>
    
  </entry>
  
  <entry>
    <title>一份来自Treebo 的 React 与 Preact PWA 性能分析报告</title>
    <link href="ejayyoung.github.io/2017/12/01/%E4%B8%80%E4%BB%BD%E6%9D%A5%E8%87%AATreebo-%E7%9A%84-React-%E4%B8%8E-Preact-PWA-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <id>ejayyoung.github.io/2017/12/01/一份来自Treebo-的-React-与-Preact-PWA-性能分析报告/</id>
    <published>2017-12-01T14:50:25.000Z</published>
    <updated>2017-12-01T15:00:08.272Z</updated>
    
    <content type="html"><![CDATA[<p>React的License事件闹的沸沸扬扬，最终以facebook修改协议的妥协收场。<br>不过那时候的第一备选方案Preact，在PWA的应用中又有怎样的优势呢<br><a id="more"></a></p>
<p><strong>作者</strong>：来自Treebo的<a href="https://twitter.com/__lakshya" target="_blank" rel="external"><em>Lakshya Ranganath</em></a>，和来自Chrome的<a href="https://twitter.com/addyosmani" target="_blank" rel="external"><em>Addy Osmani</em></a></p>
<p><img src="http://p0.qhimg.com/t01aaba6888570ae1c8.png" alt=""></p>
<p><a href="https://treebo.com" target="_blank" rel="external">Treebo</a>是一家印度家喻户晓的经济型连锁酒店，在旅游业中占据了价值200亿美元的市场。他们<a href="https://www.treebo.com/blog/google-io-2017-features-treebos-progressive-web-app/" target="_blank" rel="external">最近</a>开发了一个新的渐进式应用(PWA)作为默认的移动端体验，最开始使用<a href="http://reactjs.com" target="_blank" rel="external">React</a>,但最后在生产环境转向了<a href="http://preactjs.com" target="_blank" rel="external">Preact</a>。</p>
<p>对比之前的移动端可以看到，新版本<strong>在首屏渲染时间上提升了 70%，<a href="https://github.com/WPO-Foundation/webpagetest/blob/master/docs/Metrics/TimeToInteractive.md" target="_blank" rel="external">初始交互时间</a>减少了 31%</strong>。大部分用户在3G环境下使用自己的移动设备只需不到4s即可浏览完整内容。使用WebPageTest模拟印度超慢的3G网络也只需要不到5s。</p>
<p><img src="http://p0.qhimg.com/t010cc631c8729fef79.png" alt=""></p>
<p><strong>从React迁移到Preact也使初始交互时间缩短了15%</strong>。你可以打开<a href="https://treebo.com" target="_blank" rel="external">Treebo.com</a>完整体验一下，但是今天我们想深入探讨分析这个PWA的过程中的一些技术实现。</p>
<p><img src="http://p0.qhimg.com/t018f4b5d234cfdafbb.png" alt=""></p>
<p>这就是Treebo 新版的PWA</p>
<h2 id="1-性能优化之旅"><a href="#1-性能优化之旅" class="headerlink" title="1. 性能优化之旅"></a>1. 性能优化之旅</h2><h3 id="1-1-老版移动端"><a href="#1-1-老版移动端" class="headerlink" title="1.1 老版移动端"></a>1.1 老版移动端</h3><p>老版的Treebo移动端是基于Django框架搭建的。用户在跳转页面时必须等待服务端请求。这个版本的首屏渲染时间为1.5s，首屏完整渲染时间为5.9s，初始交互时间为6.5s。</p>
<p><img src="http://p0.qhimg.com/t0134c41d17a1a047b8.png" alt=""></p>
<h3 id="1-2-基础的React单页应用"><a href="#1-2-基础的React单页应用" class="headerlink" title="1.2 基础的React单页应用"></a>1.2 基础的React单页应用</h3><p>它们第一次迭代重构Treebo是用React和简单的<a href="https://webpack.js.org/" target="_blank" rel="external">webpack</a>来构建一个<strong>单页应用</strong>。</p>
<p>你可以看下之前写的代码。这导致生成了简单(巨大)的Javascript和CSS包(bundles)。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* webpack.js */</span></div><div class="line"></div><div class="line"><span class="symbol"> entry:</span> &#123;</div><div class="line"><span class="symbol">     main:</span> <span class="string">'./client/index.js'</span>,</div><div class="line"> &#125;,</div><div class="line"><span class="symbol"> output:</span> &#123;</div><div class="line"><span class="symbol">     path:</span> path.resolve(<span class="string">'./build/client'</span>),</div><div class="line"><span class="symbol">     filename:</span> <span class="string">'js/[name].[chunkhash:8].js'</span>,</div><div class="line"> &#125;,</div><div class="line"><span class="symbol"> module:</span> &#123;</div><div class="line"><span class="symbol">     rules:</span> [</div><div class="line">         &#123; <span class="string">test:</span> <span class="regexp">/\.js$/</span>, <span class="string">exclude:</span> <span class="regexp">/node_modules/</span>, <span class="string">use:</span> [<span class="string">'babel-loader'</span>] &#125;,</div><div class="line">         &#123; <span class="string">test:</span> <span class="regexp">/\.css$/</span>, <span class="string">loader:</span> ExtractTextPlugin.extract(&#123; <span class="string">fallback:</span> [<span class="string">'style-loader'</span>], <span class="string">use:</span> [<span class="string">'css-loader'</span>] &#125;) &#125;,</div><div class="line">     ],</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'css/[name].[contenthash:8].css'</span>),</div></pre></td></tr></table></figure>
<p>这次版本的首屏渲染时间为4.8s，初始交互时间大约5.6s，完整的首屏图片加载时间在7.2s。</p>
<p><img src="http://p0.qhimg.com/t0159387cee8ad9729c.png" alt=""></p>
<h3 id="1-3服务端渲染（SSR）"><a href="#1-3服务端渲染（SSR）" class="headerlink" title="1.3服务端渲染（SSR）"></a>1.3服务端渲染（SSR）</h3><p>接着，他们着手优化首屏渲染时间，所以他们尝试了<strong>服务端渲染</strong>。<strong>有一点值得注意，服务端渲染并不是没有副作用。它优化的同时也会消耗其他性能</strong>。</p>
<blockquote>
<p>使用<a href="https://css-tricks.com/server-side-react-rendering/" target="_blank" rel="external">服务端渲染</a>,你服务端给浏览器的返回就是你即将重绘页面的HTML，这样浏览器可以不需要等待所有Javascript加载和执行才能渲染页面。</p>
</blockquote>
<p>Treebo使用React的<a href="https://facebook.github.io/react/docs/react-dom-server.html#rendertostring" target="_blank" rel="external">renderToString()</a>将组件渲染为一段HTML字符串，并在应用初始化的时候注入state。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// reactMiddleware.js</div><div class="line"> const serverRenderedHtml = async (req, res, renderProps) =&gt; &#123;</div><div class="line">     const store = configureStore();</div><div class="line">     //call, wait, and set api responses into redux store's state (ghub.io/redux-connect)</div><div class="line">     await loadOnServer(&#123; ...renderProps, store &#125;);</div><div class="line">     //render the html template</div><div class="line">     const template = html(</div><div class="line">         renderToString(</div><div class="line">         <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span> <span class="attr">key</span>=<span class="string">"provider"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">ReduxAsyncConnect</span> &#123;<span class="attr">...renderProps</span>&#125; /&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">         ),</div><div class="line">         store.getState(),</div><div class="line">     );</div><div class="line">     res.send(template);</div><div class="line"> &#125;;</div><div class="line"> const html = (app, initialState) =&gt; `</div><div class="line">     <span class="meta">&lt;!doctype html&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;assets.main.css&#125;"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>$&#123;app&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__INITIAL_STATE__ = $&#123;<span class="built_in">JSON</span>.stringify(initialState)&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;assets.main.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"> `;</div></pre></td></tr></table></figure>
<p>在Treebo的例子中，使用服务端渲染，首屏渲染时间减少到1.1s，首屏完整渲染时间减少到2.4s - 这提高了用户在页面加载速度的感知，他们可以更提前获取内容，而且在测试中显示在SEO也略微改善。但是缺点就是在初始交互时间有糟糕的影响。</p>
<p><img src="http://p0.qhimg.com/t016792643ffe9a6792.png" alt=""></p>
<p>尽管用户可以看到网站内容，但是当初始化加载javascript时主线程被阻塞了，并且就堵在那里。</p>
<p><strong>使用SSR，浏览器需要比之前请求处理更大的HTMl负载，并且接着请求，解析／编译，执行Javascript。虽然这样高效的做了更多工作。</strong></p>
<p>但这意味着第一次交互时间需要6.6s，反而不如之前了。</p>
<p>SSR也可以通过锁定下游设备的主线程来缩短TTI。(译者注：<a href="https://en.wikipedia.org/wiki/Transmission_Time_Interval" target="_blank" rel="external">Transmission Time Interval</a>传输时间间隔)</p>
<h3 id="1-4-基于路由的代码分割和按需加载"><a href="#1-4-基于路由的代码分割和按需加载" class="headerlink" title="1.4 基于路由的代码分割和按需加载"></a>1.4 基于路由的代码分割和按需加载</h3><p>接下来Treebo要做的就是<strong>按需加载</strong>，可以减少初始交互时间。</p>
<blockquote>
<p><a href="https://gist.github.com/addyosmani/44678d476b8843fd981ff8011d389724" target="_blank" rel="external">按需加载</a>目的在于给一个路由页面的交互提供其所需要的最少代码，通过<a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="external">code-splitting</a>将路由分割成按需加载的“块”。这样让加载的资源更接近于开发者写的模块粒度。</p>
</blockquote>
<p>他们在这块的做法是，把他们的第三方依赖库，Webpack runtime manifests，和他们的路由分割成单独的块。(译者注：需要理解<a href="https://doc.webpack-china.org/concepts/manifest/" target="_blank" rel="external">webpack 的 runtime 和 manifest，可以点进来看看</a>)</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// reactMiddleware.js</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"> //add the webpackManifest and vendor script files to your html</span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>$</span><span class="template-variable">&#123;app&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__INITIAL_STATE__ = $</span></span><span class="template-variable">&#123;JSON.stringify(initialState)&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.webpackManifest.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.vendor.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.main.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></div></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// vendor.js</span></div><div class="line"></div><div class="line"> <span class="meta"><span class="meta-keyword">import</span> 'redux-pack';</span></div><div class="line"> <span class="meta"><span class="meta-keyword">import</span> 'redux-segment';</span></div><div class="line"> <span class="meta"><span class="meta-keyword">import</span> 'redux-thunk';</span></div><div class="line"> <span class="meta"><span class="meta-keyword">import</span> 'redux';</span></div><div class="line"> <span class="comment">// import other external dependencies</span></div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.js</span></div><div class="line"></div><div class="line"> <span class="attribute">entry</span>: &#123;</div><div class="line">   <span class="attribute">main</span>: <span class="string">'./client/index.js'</span>,</div><div class="line">   <span class="attribute">vendor</span>: <span class="string">'./client/vendor.js'</span>,</div><div class="line"> &#125;,</div><div class="line"> <span class="selector-tag">new</span> <span class="selector-tag">webpack</span><span class="selector-class">.optimize</span><span class="selector-class">.CommonsChunkPlugin</span>(&#123;</div><div class="line">   <span class="attribute">names</span>: [<span class="string">'vendor'</span>, <span class="string">'webpackManifest'</span>],</div><div class="line">   <span class="attribute">minChunks</span>: Infinity,</div><div class="line"> &#125;),</div></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// routes.js</span></div><div class="line"></div><div class="line"> &lt;Route</div><div class="line">     name=<span class="string">"landing"</span></div><div class="line">     path=<span class="string">"/"</span></div><div class="line">     getComponent=&#123;</div><div class="line">     (_, cb) =&gt; <span class="keyword">import</span>(<span class="string">'./views/LandingPage/LandingPage'</span> <span class="comment">/* webpackChunkName: 'landing' */</span>)</div><div class="line">     .then(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> cb(<span class="literal">null</span>, <span class="built_in">module</span>.<span class="keyword">default</span>))</div><div class="line">     .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> cb(error, <span class="literal">null</span>))</div><div class="line">     &#125;</div><div class="line"> &gt;</div><div class="line"> &lt;<span class="regexp">/Route&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.js</span></div><div class="line"></div><div class="line"> <span class="comment">//extract css from all the split chunks into main.hash.css</span></div><div class="line"> <span class="keyword">new</span> ExtractTextPlugin(&#123;</div><div class="line">   filename: <span class="string">'css/[name].[contenthash:8].css'</span>,</div><div class="line">   allChunks: <span class="literal">true</span>,</div><div class="line"> &#125;),</div></pre></td></tr></table></figure>
<p>这直接将初始交互时间减少到4.8s了。帅呆了！</p>
<p>唯一不够理想的是需要在初始化的bundles被执行完才会开始下载当前页面的Javascript。</p>
<p>但它至少在体验上提升了不少。对于按需加载，代码分割和这次体验的提升，他们做了一些更隐性的改进。他们通过webpack 的import方法调用React Router声明支持的getComponent来异步加载到各个模块中。(译者注：<a href="https://react-guide.github.io/react-router-cn/docs/guides/advanced/DynamicRouting.html" target="_blank" rel="external">想了解getComponent可以点进来</a>)</p>
<p><img src="http://p0.qhimg.com/t017be4bca1ea2d392c.png" alt=""></p>
<h3 id="1-5-PRPL性能模式"><a href="#1-5-PRPL性能模式" class="headerlink" title="1.5 PRPL性能模式"></a>1.5 PRPL性能模式</h3><p>按需加载对于代码更颗粒化的运行和缓存是非常赞的第一步。Treebo想再优化，并在<a href="https://developers.google.com/web/fundamentals/performance/prpl-pattern/" target="_blank" rel="external"><strong>PRPL 模式</strong></a>上找到了灵感。</p>
<blockquote>
<p>PRPL是一种用于结构化和提供 Progressive Web App (PWA) 的模式，该模式强调应用交付和启动的性能。</p>
</blockquote>
<p>它代表：</p>
<ul>
<li><p><strong>推送</strong> - 为初始网址路由推送关键资源。</p>
</li>
<li><p><strong>渲染</strong> - 渲染初始路由。</p>
</li>
<li><p><strong>预缓存</strong> - 预缓存剩余路由。</p>
</li>
<li><p><strong>延迟加载</strong> - 延迟加载并按需创建剩余路由。</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t01a9d211b7229f4abc.png" alt=""></p>
<p>Jimmy Moon做的一份PRPL的结构图</p>
<p>“推送”部分推荐给服务器/浏览器组合设计一个离散的结构，以便在优化缓存的同时，支持HTTP/2传递给浏览器首屏光速渲染所需的资源。这些资源的传递可以通过<a href="https://developers.google.com/web/updates/2016/03/link-rel-preload" target="_blank" rel="external"><code>&lt;link ref=&quot;preload&quot;&gt;</code></a>或者<a href="https://developers.google.com/web/fundamentals/performance/http2/#server-push" target="_blank" rel="external">HTTP/2 Push</a>来高效完成。</p>
<p>Treebo选择使用<code>&lt;link rel=”preload” /&gt;</code>加载当前路由模块。当初始模块执行完后，webpack回调获取当前路由，当前路由模块已经在缓存中了，这样就减少初始交互时间。所以现在初始交互时间在4.6s时就开始了。</p>
<p><img src="http://p0.qhimg.com/t0162f2cade10bfc7e2.png" alt=""></p>
<p>使用preload唯一不好的就是它并没有支持跨浏览器。目前，Safari已经支持link rel preload特性。我希望今年它会持续落实。目前Firefox也正在落实进行中。</p>
<h3 id="1-6-HTML流"><a href="#1-6-HTML流" class="headerlink" title="1.6 HTML流"></a>1.6 HTML流</h3><blockquote>
<p>使用<code>renderToString()</code>的缺点之一是它是异步的，这会成为React项目中服务端渲染的性能瓶颈。服务器直到全部HTML被创建后才会发送<br>请求。当web服务器输出网站内容时，浏览器会在全部请求完成之前渲染页面给用户。类似<a href="https://github.com/aickin/react-dom-stream" target="_blank" rel="external">react-dom-stream</a>这样的项目可以对此有所帮助。</p>
</blockquote>
<p>为了提高他们的app感知性能，并引入一种渐进式渲染的感觉，Treebo使用了<strong>HTML流</strong>。他们会优先输出那些带有link rel preload的头部标签，这样可以预加载CSS和Javascript。然后再执行服务端渲染，并把剩下的资源发送给浏览器。</p>
<p>这样做的好处是资源比之前更早开始下载，将首屏渲染时间降低到0.9s，初始交互时间降低到4.4s。app始终保持在4.9/5秒的节点才开始交互。</p>
<p><img src="http://p0.qhimg.com/t0199c52807c4497277.png" alt=""></p>
<p>缺点是它在客户端和服务器之间连接会保持一段时间，如果遇到稍长点的延迟时间，可能会出现问题。 针对HTML流，Treebo将传输内容定义成预加载模块，主内容模块和将要加载的模块。 所有这些都被插入到页面中。 就像这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// html.js</div><div class="line"></div><div class="line"> earlyChunk(route) &#123;</div><div class="line">     return `</div><div class="line">         <span class="meta">&lt;!doctype html&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;assets.main.css&#125;"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"script"</span> <span class="attr">href</span>=<span class="string">"$&#123;assets.webpackManifest.js&#125;"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"script"</span> <span class="attr">href</span>=<span class="string">"$&#123;assets.vendor.js&#125;"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"script"</span> <span class="attr">href</span>=<span class="string">"$&#123;assets.main.js&#125;"</span>&gt;</span></div><div class="line">             $&#123;!assets[route.name] ? '' : `<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"script"</span> <span class="attr">href</span>=<span class="string">"$&#123;assets[route.name].js&#125;"</span>&gt;</span>`&#125;</div><div class="line">         <span class="tag">&lt;/<span class="name">head</span>&gt;</span>`;</div><div class="line"> &#125;,</div><div class="line"> lateChunk(app, head, initialState) &#123;</div><div class="line">     return `</div><div class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>$&#123;app&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__INITIAL_STATE__ = $&#123;<span class="built_in">JSON</span>.stringify(initialState)&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;assets.webpackManifest.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;assets.vendor.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;assets.main.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">     `;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reactMiddleware.js</span></div><div class="line"></div><div class="line"> <span class="keyword">const</span> serverRenderedChunks = async (req, res, renderProps) =&gt; &#123;</div><div class="line">     <span class="keyword">const</span> route = renderProps.routes[renderProps.routes.length - <span class="number">1</span>];</div><div class="line">     <span class="keyword">const</span> store = configureStore();</div><div class="line">     <span class="comment">//set the content type since you're streaming the response</span></div><div class="line">     res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>);</div><div class="line">     <span class="comment">//flush the head with css &amp; js resource tags first so the download starts immediately</span></div><div class="line">     <span class="keyword">const</span> earlyChunk = html.earlyChunk(route);</div><div class="line">     res.<span class="built_in">write</span>(earlyChunk);</div><div class="line">     res.<span class="built_in">flush</span>();</div><div class="line">     <span class="comment">//call &amp; wait for api's response, set them into state</span></div><div class="line">     await loadOnServer(&#123; ...renderProps, store &#125;);</div><div class="line">     <span class="comment">//flush the rest of the body once app the server side rendered</span></div><div class="line">     <span class="keyword">const</span> lateChunk = html.lateChunk(</div><div class="line">         renderToString(</div><div class="line">         &lt;Provider store=&#123;store&#125; key=<span class="string">"provider"</span>&gt;</div><div class="line">             &lt;ReduxAsyncConnect &#123;...renderProps&#125; /&gt;</div><div class="line">         &lt;/Provider&gt;,</div><div class="line">         ),</div><div class="line">         Helmet.renderStatic(),</div><div class="line">         store.getState(),</div><div class="line">         route,</div><div class="line">     );</div><div class="line">     res.<span class="built_in">write</span>(lateChunk);</div><div class="line">     res.<span class="built_in">flush</span>();</div><div class="line">     <span class="comment">//let client know the response has ended</span></div><div class="line">     res.<span class="built_in">end</span>();</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>对于所有不同的脚本标签，预加载模块已经获取到它们的<code>rel=preload</code>声明。将要加载的模块则获取了服务端返回的html和其他包含state的内容，或者正在使用已经加载的Javascript。</p>
<h3 id="1-7-内联对应路径CSS"><a href="#1-7-内联对应路径CSS" class="headerlink" title="1.7 内联对应路径CSS"></a>1.7 内联对应路径CSS</h3><blockquote>
<p>CSS样式表会阻塞页面的渲染。页面会在浏览器发起请求，接收，下载，并且解析你的样式表之前保持空白。通过减少浏览器需要加载的CSS数量，并把<a href="https://jonassebastianohlsson.com/criticalpathcssgenerator/#what-is" target="_blank" rel="external">对应路径样式</a>内联到页面中，这样就减少了一个HTTP请求，页面就可以更快的渲染。</p>
</blockquote>
<p>Treebo在当前路由支持了<strong>内联对应路径的样式</strong>，并在DOMContentLoaded时使用<a href="https://github.com/filamentgroup/loadCSS" target="_blank" rel="external">loadCSS</a>异步加载剩余的CSS。</p>
<p>这消除了<code>&lt;link&gt;</code>标签对对应路径页面渲染的阻塞，并加入了少量的核心CSS，将首屏渲染时间减少至0.4s。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fragments.js</span></div><div class="line"></div><div class="line"> <span class="keyword">import</span> assetsManifest <span class="keyword">from</span> <span class="string">'../../build/client/assetsManifest.json'</span>;</div><div class="line"> <span class="comment">//read the styles into an assets object during server startup</span></div><div class="line"> <span class="keyword">export</span> <span class="keyword">const</span> assets = <span class="built_in">Object</span>.keys(assetsManifest)</div><div class="line">     .reduce(<span class="function">(<span class="params">o, entry</span>) =&gt;</span> (&#123;</div><div class="line">         ...o,</div><div class="line">         [entry]: &#123;</div><div class="line">             ...assetsManifest[entry],</div><div class="line">             styles: assetsManifest[entry].css ?    fs.readFileSync(<span class="string">`build/client/css/<span class="subst">$&#123;assetsManifest[entry].css.split(<span class="string">'/'</span>).pop()&#125;</span>`</span>, <span class="string">'utf8'</span>) : <span class="literal">undefined</span>,</div><div class="line">         &#125;,</div><div class="line">     &#125;), &#123;&#125;);</div><div class="line">     <span class="keyword">export</span> <span class="keyword">const</span> scripts = &#123;</div><div class="line">         <span class="comment">//loadCSS by filamentgroup</span></div><div class="line">         loadCSS: <span class="string">'var loadCSS=function(e,n,t)&#123;func...'</span>,</div><div class="line">         loadRemainingCSS(route) &#123;</div><div class="line">             <span class="keyword">return</span> <span class="built_in">Object</span>.keys(assetsManifest)</div><div class="line">                 .filter(<span class="function">(<span class="params">entry</span>) =&gt;</span> assetsManifest[entry].css &amp;&amp; entry !== route.name &amp;&amp; entry !== <span class="string">'main'</span>)</div><div class="line">                 .reduce(<span class="function">(<span class="params">s, entry</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;s&#125;</span>loadCSS("<span class="subst">$&#123;assetsManifest[entry].css&#125;</span>");`</span>, <span class="keyword">this</span>.loadCSS);</div><div class="line">     &#125;,</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// html.js</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">//use the assets object to inline styles into your lateChunk template generation logic during runtime</span></div><div class="line"><span class="xml"> lateChunk(route) </span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">     return `</span></div><div class="line"><span class="template-variable">                &lt;style&gt;$&#123;assets.main.styles&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">$</span></span><span class="template-variable">&#123;assets[route.name].styles&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>$</span><span class="template-variable">&#123;app&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__INITIAL_STATE__ = $</span></span><span class="template-variable">&#123;JSON.stringify(initialState)&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.webpackManifest.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.vendor.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.main.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">$</span></span><span class="template-variable">&#123;scripts.loadRemainingCSS(route)&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></div><div class="line"><span class="xml">     `;</span></div><div class="line"><span class="xml"> &#125;,</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// webpack.client.js</div><div class="line"></div><div class="line">//<span class="keyword">replace</span> ExtractTextPlugin <span class="keyword">with</span> ExtractCssChunks <span class="keyword">from</span> <span class="string">'extract-css-chunks-webpack-plugin'</span></div><div class="line"> <span class="keyword">module</span>: &#123;</div><div class="line">     <span class="keyword">rules</span>: isProd ? [</div><div class="line">         &#123; <span class="keyword">test</span>: /\.js$/, <span class="keyword">exclude</span>: /node_modules/, <span class="keyword">use</span>: [<span class="string">'babel-loader'</span>] &#125;,</div><div class="line">         &#123; <span class="keyword">test</span>: /\.css$/, loader: ExtractCssChunks.extract(&#123; <span class="keyword">use</span>: [&#123; loader: <span class="string">'css-loader'</span>, options: &#123; importLoaders: <span class="number">1</span> &#125; &#125;, <span class="string">'postcss-loader'</span>] &#125;) &#125;,</div><div class="line"> //...</div><div class="line"> plugins: [</div><div class="line">     <span class="keyword">new</span> ExtractCssChunks(<span class="string">'css/[name].[contenthash:8].css'</span>),</div><div class="line">     //this generates a css <span class="keyword">chunk</span> alongside the js <span class="keyword">chunk</span> <span class="keyword">for</span> <span class="keyword">each</span> dynamic <span class="keyword">import</span>() <span class="keyword">call</span> (route-<span class="keyword">split</span> <span class="keyword">path</span> <span class="keyword">in</span> our <span class="keyword">case</span>) <span class="keyword">for</span> eg,</div><div class="line">     //main.hash.js, main.hash.css</div><div class="line">     //landing.hash.js, landing.hash.css</div><div class="line">     //cities.hash.js, cities.hash.css</div><div class="line">     //the landing.hash.css <span class="keyword">and</span> cities.hash.css will contain the css <span class="keyword">rules</span> <span class="keyword">for</span> their respective chunks</div><div class="line">     //but will also contain <span class="keyword">shared</span> <span class="keyword">rules</span> <span class="keyword">between</span> them <span class="keyword">like</span> button, grid, typography css <span class="keyword">and</span> so <span class="keyword">on</span></div><div class="line">     //<span class="keyword">to</span> <span class="keyword">extract</span> these <span class="keyword">shared</span> <span class="keyword">rules</span> <span class="keyword">to</span> the main.hash.css <span class="keyword">use</span> the CommonsChunkPlugin</div><div class="line">     //bonus: this also extracts the common js code <span class="keyword">shared</span> <span class="keyword">between</span> landing.hash.js <span class="keyword">and</span> cities.hash.js <span class="keyword">into</span> main.hash.js</div><div class="line">     <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">         children: <span class="literal">true</span>,</div><div class="line">         minChunks: <span class="number">2</span>,</div><div class="line">     &#125;),</div><div class="line">     //<span class="keyword">use</span> the assets-webpack-<span class="keyword">plugin</span> <span class="keyword">to</span> <span class="keyword">get</span> a manifest <span class="keyword">of</span> all the <span class="keyword">generated</span> files</div><div class="line">     <span class="keyword">new</span> AssetsPlugin(&#123;</div><div class="line">         filename: <span class="string">'assetsManifest.json'</span>,</div><div class="line">         <span class="keyword">path</span>: path.resolve(<span class="string">'./build/client'</span>),</div><div class="line">         prettyPrint: <span class="literal">true</span>,</div><div class="line">     &#125;),</div><div class="line"> //...</div></pre></td></tr></table></figure>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// html.js</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">//use the assets object to inline styles into your lateChunk template generation logic during runtime</span></div><div class="line"><span class="xml"> lateChunk(route) </span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">     return `</span></div><div class="line"><span class="template-variable">                 &lt;style&gt;$&#123;assets.main.styles&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></div><div class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">$</span></span><span class="template-variable">&#123;assets[route.name].styles&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></div><div class="line"><span class="xml">             <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></div><div class="line"><span class="xml">             <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>$</span><span class="template-variable">&#123;app&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__INITIAL_STATE__ = $</span></span><span class="template-variable">&#123;JSON.stringify(initialState)&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.webpackManifest.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.vendor.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.main.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">$</span></span><span class="template-variable">&#123;scripts.loadRemainingCSS(route)&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml">             <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></div><div class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></div><div class="line"><span class="xml">     `;</span></div><div class="line"><span class="xml"> &#125;,</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// webpack.client.js</div><div class="line">//<span class="keyword">replace</span> ExtractTextPlugin <span class="keyword">with</span> ExtractCssChunks <span class="keyword">from</span> <span class="string">'extract-css-chunks-webpack-plugin'</span></div><div class="line"> <span class="keyword">module</span>: &#123;</div><div class="line">     <span class="keyword">rules</span>: isProd ? [</div><div class="line">         &#123; <span class="keyword">test</span>: /\.js$/, <span class="keyword">exclude</span>: /node_modules/, <span class="keyword">use</span>: [<span class="string">'babel-loader'</span>] &#125;,</div><div class="line">         &#123; <span class="keyword">test</span>: /\.css$/, loader: ExtractCssChunks.extract(&#123; <span class="keyword">use</span>: [&#123; loader: <span class="string">'css-loader'</span>, options: &#123; importLoaders: <span class="number">1</span> &#125; &#125;, <span class="string">'postcss-loader'</span>] &#125;) &#125;,</div><div class="line">         //...</div><div class="line"> plugins: [</div><div class="line">     <span class="keyword">new</span> ExtractCssChunks(<span class="string">'css/[name].[contenthash:8].css'</span>),</div><div class="line">     //this generates a css <span class="keyword">chunk</span> alongside the js <span class="keyword">chunk</span> <span class="keyword">for</span> <span class="keyword">each</span> dynamic <span class="keyword">import</span>() <span class="keyword">call</span> (route-<span class="keyword">split</span> <span class="keyword">path</span> <span class="keyword">in</span> our <span class="keyword">case</span>) <span class="keyword">for</span> eg,</div><div class="line">     //main.hash.js, main.hash.css</div><div class="line">     //landing.hash.js, landing.hash.css</div><div class="line">     //cities.hash.js, cities.hash.css</div><div class="line">     //the landing.hash.css <span class="keyword">and</span> cities.hash.css will contain the css <span class="keyword">rules</span> <span class="keyword">for</span> their respective chunks</div><div class="line">     //but will also contain <span class="keyword">shared</span> <span class="keyword">rules</span> <span class="keyword">between</span> them <span class="keyword">like</span> button, grid, typography css <span class="keyword">and</span> so <span class="keyword">on</span></div><div class="line">     //<span class="keyword">to</span> <span class="keyword">extract</span> these <span class="keyword">shared</span> <span class="keyword">rules</span> <span class="keyword">to</span> the main.hash.css <span class="keyword">use</span> the CommonsChunkPlugin</div><div class="line">     //bonus: this also extracts the common js code <span class="keyword">shared</span> <span class="keyword">between</span> landing.hash.js <span class="keyword">and</span> cities.hash.js <span class="keyword">into</span> main.hash.js</div><div class="line">     <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">         children: <span class="literal">true</span>,</div><div class="line">         minChunks: <span class="number">2</span>,</div><div class="line">     &#125;),</div><div class="line">     //<span class="keyword">use</span> the assets-webpack-<span class="keyword">plugin</span> <span class="keyword">to</span> <span class="keyword">get</span> a manifest <span class="keyword">of</span> all the <span class="keyword">generated</span> files</div><div class="line">     <span class="keyword">new</span> AssetsPlugin(&#123;</div><div class="line">         filename: <span class="string">'assetsManifest.json'</span>,</div><div class="line">         <span class="keyword">path</span>: path.resolve(<span class="string">'./build/client'</span>),</div><div class="line">         prettyPrint: <span class="literal">true</span>,</div><div class="line">     &#125;),</div><div class="line">     //...</div></pre></td></tr></table></figure>
<p>缺点就是首屏渲染时间稍微增加到4.6s，因为内联样式使加载资源更大，并且在Javascript执行之前解析也需要时间。</p>
<p><img src="http://p0.qhimg.com/t0179e9c65426dde6c2.png" alt=""></p>
<h3 id="1-8-离线静态资源缓存"><a href="#1-8-离线静态资源缓存" class="headerlink" title="1.8 离线静态资源缓存"></a>1.8 离线静态资源缓存</h3><blockquote>
<p><a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external">Service Worker</a>是一种可编程网络代理，让你能够控制页面所发送网络请求的处理方式。</p>
</blockquote>
<p>Treebo添加了Service Worker以支持静态资源以及自定义离线页面的缓存。下面我可以看到Service Worker的注册和他们如何使用<a href="https://www.npmjs.com/package/sw-precache-webpack-plugin" target="_blank" rel="external">sw-precache-webpack-plugin</a>来缓存资源。</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fragments.js</span></div><div class="line"> <span class="comment">// register the service worker after the onload event to prevent</span></div><div class="line"> <span class="comment">// bandwidth resource contention during the main and vendor js downloads</span></div><div class="line"> export const scripts = &#123;</div><div class="line">     serviceWorker:</div><div class="line">         `<span class="string">"serviceWorker"</span> in window.navigator &amp;&amp; window.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></div><div class="line">             window.navigator.serviceWorker.register(<span class="string">"/serviceWorker.js"</span>)</div><div class="line">             .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(r)</span> &#123;</span></div><div class="line">             console.<span class="built_in">log</span>(<span class="string">"ServiceWorker registration successful with scope: "</span>, r.scope)</div><div class="line">             &#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(e)</span> &#123;</span></div><div class="line">             console.<span class="built_in">error</span>(<span class="string">"ServiceWorker registration failed: "</span>, e)</div><div class="line">             &#125;)</div><div class="line">         &#125;);`,</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// html.js</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.webpackManifest.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.vendor.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;assets.main.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">$</span></span><span class="template-variable">&#123;scripts.loadRemainingCSS(route)&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"> //add the serviceWorker script to your html template</span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">$</span></span><span class="template-variable">&#123;scripts.serviceWorker&#125;</span><span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"></div><div class="line"> <span class="comment">//serve it at the root level scope</span></div><div class="line"> app.<span class="keyword">use</span>(<span class="string">'/serviceWorker.js'</span>, express.<span class="keyword">static</span>(<span class="string">'build/client/serviceWorker.js'</span>));</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.js</span></div><div class="line"></div><div class="line"> <span class="keyword">new</span> SWPrecacheWebpackPlugin(&#123;</div><div class="line">     cacheId: <span class="string">'app-name'</span>,</div><div class="line">     filename: <span class="string">'serviceWorker.js'</span>,</div><div class="line">     staticFileGlobsIgnorePatterns: [<span class="regexp">/\.map$/</span>, <span class="regexp">/manifest/i</span>],</div><div class="line">     dontCacheBustUrlsMatching: <span class="regexp">/./</span>,</div><div class="line">     minify: <span class="keyword">true</span>,</div><div class="line"> &#125;),</div></pre></td></tr></table></figure>
<p><img src="http://p0.qhimg.com/t0162913d96c30e53c7.png" alt=""></p>
<p>缓存静态资源（比如CSS和Javascript包）意味着页面在反复访问时可以立即从硬盘缓存中加载，而不是需要每次都请求服务器。关于硬盘缓存命中率，硬盘定义的缓存头可以产生同样的效果，但是Service Worker给我们提供了离线支持。</p>
<p><img src="http://p0.qhimg.com/t015a1a1f18dea2f3ab.png" alt=""></p>
<p>在缓存Javascript时，Service Worker使用了缓存API(如我们在<a href="https://medium.com/reloading/javascript-start-up-performance-69200f43b201" target="_blank" rel="external">JavaScript 性能入门</a>一文中提到的)，使得Treebo在V8的代码缓存中也有不俗的优先选择，这样Treebo在反复访问时的启动节省了一点时间。</p>
<p>接下来，Treebo想尝试减少他们第三方插件包的大小和JS的执行时间，于是他们在生产环境将React换成了<strong>Preact</strong>。</p>
<h3 id="1-9-Preact替换React"><a href="#1-9-Preact替换React" class="headerlink" title="1.9 Preact替换React"></a>1.9 Preact替换React</h3><p><a href="http://preactjs.com" target="_blank" rel="external">Preact</a>是一个跟React同样使用ES2015 API，精简到3KB的替代方案。它旨在提供高性能渲染，并且与React生态系统的其余部分（如Redux）配合使用（preact-compat）。</p>
<p>Preact精简的部分在于删除了合成事件(Synthetic Events)和PropType验证。 另外它还包含：</p>
<ul>
<li><p>虚拟DOM(Virtual DOM)和真实DOM的对比</p>
</li>
<li><p>支持class和for的props</p>
</li>
<li><p>在render方法中传入了(props, state)</p>
</li>
<li><p>使用标准浏览器事件</p>
</li>
<li><p>完全支持异步渲染</p>
</li>
<li><p>SubTree默认无效</p>
</li>
</ul>
<p>在很多PWA应用中，替换成Preact可以让应用减小JS包的大小，并且缩短了Javascript初始化时间。最近发布的PWA，例如Lyft， Uber和 Housing.com都在生产环境使用了Preact。</p>
<p><strong>注意：如果你的项目是React开发的，并且你想换成Preact？ 理想情况下，您应该使用preact和preact-compat来进行开发，生产和测试。 这可以让你在早期发现任何交互操作性错误。 如果你只想在Webpack中仅使用别名preact和preact-compat生成构建（例如，如果你最开始使用Enzyme），请确保在部署到服务器之前彻底测试一切正常工作。</strong></p>
<p>在Treebo的案例中，转换成Preact让他们的第三方包大小直接从140kb降到100kb。当然，全都是gzip之后的。这让Treebo成功的在目标移动设备将初始交互时间从<strong>4.6s降低到3.9s</strong>。</p>
<p><img src="http://p0.qhimg.com/t018b21f7926acf5e03.png" alt=""></p>
<p>你可以在你的Webpack里面配置alias，react对应<a href="https://github.com/developit/preact-compat" target="_blank" rel="external">preact-compat</a>,react-dom也对应preact-compat。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.js</span></div><div class="line"></div><div class="line"> <span class="attribute">resolve</span>: &#123;</div><div class="line">     <span class="attribute">alias</span>: &#123;</div><div class="line">          <span class="attribute">react</span>: <span class="string">'preact-compat'</span>,</div><div class="line">         <span class="string">'react-dom'</span>: <span class="string">'preact-compat'</span>,</div><div class="line">     &#125;,</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<p>这种方法的缺点是，需要兼容其他配套方案，这样Preact才能在他们想使用的React生态的各部分中同样工作</p>
<p>如果你正在使用React，Preact对于95%的案例来说都是最合适的选择；对于另外那5%，你可能需要给那些尚未考虑的边缘案例提交bug。</p>
<p>注意：由于WebPageTest目前还不支持测试印度真实的Moto G4s，性能测试是在“孟买 - EC2 - Chrome - 仿真摩托罗拉G（第4代） - 3GSlow - 手机”设置下运行的。 如果你想看看这些记录，可以在<a href="https://gist.github.com/addyosmani/d2fc259e1f1d19b64ae0fcbdfac025a2" target="_blank" rel="external">这里</a>找到它们。</p>
<h3 id="1-10-加载占位图"><a href="#1-10-加载占位图" class="headerlink" title="1.10 加载占位图"></a>1.10 <strong>加载占位图</strong></h3><blockquote>
<p>“加载占位图本质上是内容逐渐加载的一个空白页面。”</p>
<p>~Luke Wroblewski</p>
</blockquote>
<p><img src="http://p0.qhimg.com/t01c0cea29058763436.png" alt=""></p>
<p>Treebo想使用预览组件(类似给每个组件添加加载占位图)来加载占位。这个方法的本质就是给所有基础组件(文本，图片等)添加一个预览组件，这样一旦组件所需的数据源还没加载出来，就会显示组件对应的预览组件。</p>
<p>例如，你正在上面这个列表中看到的酒店名称，城市名称，价格等内容，他们使用排版组件类似,添加两个额外的prop，<code>preview</code>和<code>previewStyle</code>来实现。</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// Text.js</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">Text</span></span></span></div><div class="line"><span class="xml">     preview=</span><span class="template-variable">&#123;!hotel.name&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">     previewStyle=</span><span class="template-variable">&#123;&#123;width: 80%&#125;</span><span class="xml">&#125;</span></div><div class="line"><span class="xml"> &gt;</span></div><div class="line"><span class="xml">     </span><span class="template-variable">&#123;hotel.name&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>基本上，如果hotel.name不存在，则组件会将背景更改为灰色，并根据传递的previewStyle设置宽度和其他样式（如果没有预览样式传递，则默认为100％）。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// text.css</span></div><div class="line"> <span class="selector-class">.text</span> &#123;</div><div class="line">     <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</div><div class="line">     <span class="attribute">color</span>: var(--color-secondary);</div><div class="line">     &amp;--preview &#123;</div><div class="line">         <span class="attribute">opacity</span>: <span class="number">0.1</span>;</div><div class="line">         <span class="attribute">height</span>: <span class="number">13px</span>;</div><div class="line">         <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">         <span class="attribute">background</span>: var(--color-secondary);</div><div class="line">     &#125;</div><div class="line">     @<span class="keyword">media</span> (--medium-screen) &#123;</div><div class="line">         <span class="attribute">font-size</span>: <span class="number">1.4rem</span>;</div><div class="line">         &amp;--preview &#123;</div><div class="line">             <span class="attribute">height</span>: <span class="number">16px</span>;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Text.js</span></div><div class="line"></div><div class="line"> <span class="keyword">import</span> React, &#123; PropTypes &#125; from <span class="string">'react'</span>;</div><div class="line"> <span class="keyword">import</span> <span class="literal">cn</span> from <span class="string">'classnames'</span>;</div><div class="line"> const Text = (&#123;</div><div class="line">     className,</div><div class="line">     <span class="built_in">tag</span>,</div><div class="line">     preview,</div><div class="line">     previewStyle,</div><div class="line">     children,</div><div class="line">     <span class="params">...</span>props</div><div class="line"> &#125;) =&gt;</div><div class="line">     React.createElement(<span class="built_in">tag</span>, &#123;</div><div class="line">         style: preview ? previewStyle : &#123;&#125;,</div><div class="line">         className: <span class="literal">cn</span>(<span class="string">'text'</span>, &#123;</div><div class="line">             <span class="string">'text--preview'</span>: preview,</div><div class="line">         &#125;, className),</div><div class="line">         <span class="params">...</span>props,</div><div class="line">     &#125;, children);</div><div class="line"> Text.propTypes = &#123;</div><div class="line">     className: PropTypes.<span class="built_in">string</span>,</div><div class="line">     <span class="built_in">tag</span>: PropTypes.<span class="built_in">string</span>.isRequired,</div><div class="line">     preview: PropTypes.bool.isRequired,</div><div class="line">     previewStyle: PropTypes.object,</div><div class="line">     children: PropTypes.node,</div><div class="line"> &#125;;</div><div class="line"> Text.defaultProps = &#123;</div><div class="line">     <span class="built_in">tag</span>: <span class="string">'p'</span>,</div><div class="line">     preview: <span class="literal">false</span>,</div><div class="line"> &#125;;</div><div class="line"> export default Text;</div></pre></td></tr></table></figure>
<p>Treebo喜欢这种方法是因为，切换到预览模式的逻辑与实际展示的数据无关，这样看起来更灵活。当你在浏览“包含xx所有税”部分时，它就只是静态文字，在开始时可能正常显示，但是当api调用时，价格仍在加载，就会让用户感觉很困惑。</p>
<p>所以为了在剩下的ui中把静态文字“包含xx所有税”展示在预览模式，他们使用价格本身作为逻辑判断。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// TextPreview.js</div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">Text</span> <span class="attr">preview</span>=<span class="string">&#123;!price.sellingPrice&#125;</span>&gt;</span></div><div class="line">     Incl. of all taxes</div><div class="line"> <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样当价格还在加载时，你会获取到预览的界面，一旦api接口返回成功，你就可以看到展示的数据了。</p>
<h2 id="2-Webpack-bundle-analyzer"><a href="#2-Webpack-bundle-analyzer" class="headerlink" title="2. Webpack-bundle-analyzer"></a>2. <strong>Webpack-bundle-analyzer</strong></h2><p>在这一点，Treebo想做打包分析，这样可以找出一些低频使用的包来优化。</p>
<p><strong>注意：如果你在移动端使用了类似React的库，经常优化你引入的第三方库，是非常重要的。不这样做可能会导致性能问题。考虑如何更好的打包你的第三方库，这样路由只会加载页面所需要的库</strong></p>
<p>Treebo使用<a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="external">webpack-bundle-analyzer</a>来跟踪他们包的大小变化，并在每个路由块中监视其中包含的模块。他们也用它来发现可以优化减小包大小的地方，例如去掉moment.js的locales，复用深依赖。</p>
<h3 id="2-1-使用webpack优化moment-js"><a href="#2-1-使用webpack优化moment-js" class="headerlink" title="2.1 使用webpack优化moment.js"></a>2.1 使用webpack优化moment.js</h3><p>Treebo在他们的日期操作重度依赖<a href="https://momentjs.com/" target="_blank" rel="external">moment.js</a>。当你引入了moment.js，并用webpack把它打包，你的包会包含所有moment.js，而它默认的语言包gizp之后都有约61.95kb。这严重增加了最终第三方库打包完的包大小。</p>
<p><img src="http://p0.qhimg.com/t01409886cb87ed8f46.png" alt=""></p>
<p>为了优化moment.js的大小，有<a href="https://github.com/jmblog/how-to-optimize-momentjs-with-webpack" target="_blank" rel="external">两个webpack插件</a>可以用：<a href="https://webpack.js.org/plugins/ignore-plugin/" target="_blank" rel="external">IgnorePlugin</a>, <a href="https://webpack.js.org/plugins/context-replacement-plugin/" target="_blank" rel="external">ContextReplacementPlugin</a></p>
<p>当Treebo不再需要任何语言包，他们选择了IgnorePlugin来移除所有语言文件。</p>
<p><strong>new webpack.IgnorePlugin(/^.\/locale$/, /moment$/)</strong></p>
<p>去除了语言包后，moment.js打包后大小在gizp后降低到约16.48kb。</p>
<p><img src="http://p0.qhimg.com/t010b4bd9347b9d57c3.png" alt=""></p>
<p>作为移除moment.js语言包的边际影响力的最大改善，就是第三方包大小直接从179kb降到119kb。对于首屏加载时一个关键的包，60kb算是大幅度的下降。所有这些都意味着第一次交互时间的大幅度下降。你可以在<a href="https://github.com/jmblog/how-to-optimize-momentjs-with-webpack" target="_blank" rel="external">这里</a>阅读更多关于优化moment.js。</p>
<h3 id="2-2-复用深依赖"><a href="#2-2-复用深依赖" class="headerlink" title="2.2 复用深依赖"></a>2.2 复用深依赖</h3><p>Treebo最开始使用“qs”模块来进行查询字符串操作。在webpack-bundle-analyzer分析的结果中，他们发现“react-router”中包含的“history”模块中包含了“query-string”模块。</p>
<p><img src="http://p0.qhimg.com/t010c140ded0eb2127b.png" alt=""></p>
<p>因为这两个不同的模块都做了相同的操作，在他们源代码中使用当前版本的“query-string”(就是当前安装的)来替换“qs”，又让他们的包gizp后减少2.72kb(也就是“qs”模块的大小)。</p>
<p>Treebo是一个很好的开源参与者。他们使用来大量的开源软件。作为回报，他们也把自己大部分的Webpack配置开源，包含了很多他们在生产环境的配置，可以作为一个模版。你可以在这里找到：<a href="https://github.com/lakshyaranganath/pwa" target="_blank" rel="external">https://github.com/lakshyaranganath/pwa</a></p>
<p><img src="http://p0.qhimg.com/t017ab909526a03a5d6.jpg" alt=""></p>
<p>他们也承诺会尽量保持更新。随着不断完善，您可以把它们作为另一个PWA实现参考。</p>
<h2 id="3-总结和未来"><a href="#3-总结和未来" class="headerlink" title="3. 总结和未来"></a>3. <strong>总结和未来</strong></h2><p>Treebo知道，没有什么应用是完美的，他们积极探索多种方法，不断改进他们向用户提供的经验。其中一些：</p>
<p><strong>懒加载图片</strong></p>
<p>有些人可能从之前的网络瀑布图中了解到，网站图像下载是跟JS下载来竞争带宽。</p>
<p><img src="http://p0.qhimg.com/t01bbc5dea36b8b1f23.png" alt=""></p>
<p>由于浏览器解析img标签后立即触发图片下载，在JS下载过程中它们共享带宽。 一个简单的解决方案是当它们进入用户视图时懒加载图片，这也可以减少我们的交互时间。</p>
<p>Lighthouse在视图外图片审查高亮了这些问题：</p>
<p><img src="http://p0.qhimg.com/t01a93ebe77c0c64bef.png" alt=""></p>
<p><strong>双重引用</strong></p>
<p>Treebo也意识到,虽然他们是异步加载应用的剩余CSS(在加载内联对应路径CSS之后),随着他们的应用发展，从长远来看，这种方法对用户是不可行的。更多的迭代和页面意味着更多的CSS和下载，这些都将导致带宽占用和浪费。</p>
<p>借鉴<a href="https://github.com/filamentgroup/loadCSS" target="_blank" rel="external">loadCSS</a>和<a href="https://github.com/faceyspacey/babel-plugin-dual-import" target="_blank" rel="external">babel-plugin-dual-import</a>的实现方法，Treebo在各自的JS模块中，并行异步执行import(‘chunkpath’)方法，再通过自定义实现的importCss(‘chunkname’)方法返回CSS模块，以此改变加载CSS的方法。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// html.js</div><div class="line"></div><div class="line"> import assetsManifest from '../../build/client/assetsManifest.json';</div><div class="line"></div><div class="line"> lateChunk(app, head, initialState, route) &#123;</div><div class="line">     return `</div><div class="line">             <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">$&#123;assets.main.styles&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">             // inline the current route's css and assign an id to it</div><div class="line">             $&#123;!assets[route.name] ? '' : `<span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">"$&#123;route.name&#125;.css"</span>&gt;</span><span class="undefined">$&#123;assets[route.name].styles&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>`&#125;</div><div class="line">         <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>$&#123;app&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__INITIAL_STATE__ = $&#123;<span class="built_in">JSON</span>.stringify(initialState)&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__ASSETS_MANIFEST__ = $&#123;<span class="built_in">JSON</span>.stringify(assetsManifest)&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;assets.webpackManifest.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;assets.vendor.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;assets.main.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">html</span>&gt;</span>`;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// importCSS.js</span></div><div class="line"></div><div class="line"> <span class="keyword">export</span> <span class="keyword">default</span> (chunkName) =&gt; &#123;</div><div class="line">     <span class="keyword">if</span> (!__BROWSER__) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(chunkName <span class="keyword">in</span> <span class="built_in">window</span>.__ASSETS_MANIFEST__)) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">`chunk not found: <span class="subst">$&#123;chunkName&#125;</span>`</span>);</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">window</span>.__ASSETS_MANIFEST__[chunkName].css) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">`chunk css does not exist: <span class="subst">$&#123;chunkName&#125;</span>`</span>);</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">`<span class="subst">$&#123;chunkName&#125;</span>.css`</span>)) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">`css chunk already loaded: <span class="subst">$&#123;chunkName&#125;</span>`</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">const</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">     <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</div><div class="line">     link.href = <span class="built_in">window</span>.__ASSETS_MANIFEST__[chunkName].css;</div><div class="line">     link.id = <span class="string">`<span class="subst">$&#123;chunkName&#125;</span>.css`</span>;</div><div class="line">     link.rel = <span class="string">'stylesheet'</span>;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">         <span class="keyword">let</span> timeout;</div><div class="line">         link.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">             link.onload = <span class="literal">null</span>;</div><div class="line">             link.onerror = <span class="literal">null</span>;</div><div class="line">             clearTimeout(timeout);</div><div class="line">             resolve(<span class="string">`css chunk loaded: <span class="subst">$&#123;chunkName&#125;</span>`</span>);</div><div class="line">         &#125;;</div><div class="line">         link.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">             link.onload = <span class="literal">null</span>;</div><div class="line">             link.onerror = <span class="literal">null</span>;</div><div class="line">             clearTimeout(timeout);</div><div class="line">             reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`could not load css chunk: <span class="subst">$&#123;chunkName&#125;</span>`</span>));</div><div class="line">         &#125;;</div><div class="line">         timeout = setTimeout(link.onerror, <span class="number">30000</span>);</div><div class="line">         head.appendChild(link);</div><div class="line">     &#125;);</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// routes.js</span></div><div class="line"></div><div class="line"> &lt;IndexRoute</div><div class="line">     name=<span class="string">"landing"</span></div><div class="line">     getComponent=&#123;<span class="function">(<span class="params">_, cb</span>) =&gt;</span> &#123;</div><div class="line">         <span class="built_in">Promise</span>.all([</div><div class="line">             <span class="keyword">import</span>(<span class="string">'./views/LandingPage/LandingPage'</span> <span class="comment">/* webpackChunkName: 'landing' */</span>),</div><div class="line">             importCss(<span class="string">'landing'</span>),</div><div class="line">         ]).then(<span class="function">(<span class="params">[<span class="built_in">module</span>]</span>) =&gt;</span> cb(<span class="literal">null</span>, <span class="built_in">module</span>.<span class="keyword">default</span>));</div><div class="line">     &#125;&#125;</div><div class="line"> /&gt;</div><div class="line"> &lt;Route</div><div class="line">     name=<span class="string">"search"</span></div><div class="line">     path=<span class="string">"/search/"</span></div><div class="line">     getComponent=&#123;<span class="function">(<span class="params">_, cb</span>) =&gt;</span> &#123;</div><div class="line">         <span class="built_in">Promise</span>.all([</div><div class="line">             <span class="keyword">import</span>(<span class="string">'./views/SearchResultsPage/SearchResultsPage'</span> <span class="comment">/* webpackChunkName: 'search' */</span>),</div><div class="line">             importCss(<span class="string">'search'</span>),</div><div class="line">         ]).then(<span class="function">(<span class="params">[<span class="built_in">module</span>]</span>) =&gt;</span> cb(<span class="literal">null</span>, <span class="built_in">module</span>.<span class="keyword">default</span>));</div><div class="line">     &#125;&#125;</div><div class="line"> /&gt;</div></pre></td></tr></table></figure>
<p>通过这种新方法，路由跳转会进行两个并行的异步请求，一个给JS，另一个给CSS，而不像之前所有的CSS都在DOMContentLoaded时被加载。对于用户只会下载当前访问页面所需的CSS来说，这样更可行。</p>
<p><strong>A/B 测试</strong></p>
<p>Treebo目前正在实施AB测试方法，包含服务器端渲染和代码分割，以便在服务器端和客户端渲染期间拉下用户所需要的版本。 （Treebo将发布一篇关于他们如何解决这个问题的博文）。</p>
<p><strong>预加载</strong></p>
<p>理想中，为了避免对关键资源下载的流量争用，Treebo不希望在页面初始加载所有应用分割的模块，对于移动端用户，在下次访问时，如果没使用service-worker来缓存，也确实浪费宝贵的流量。如果我们看看Treebo在持续交互方面做的怎样，仍然有许多空间可以改善：</p>
<p><img src="http://p0.qhimg.com/t01bb9591d9a250e06b.png" alt=""></p>
<p>这是他们正在尝试改进的领域。 一个例子是在按钮的波纹动画期间预加载下一个路由模块。 点击时， Treebo使用webpack<a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="external">动态import（）</a>回调来加载下一个路由模块，并用setTimeout延迟路由跳转。 他们还希望确保下一个路由模块足够小，以便在缓慢的3g网络上给定的400ms之内能加载完。</p>
<h2 id="4-完结"><a href="#4-完结" class="headerlink" title="4. 完结"></a>4. 完结</h2><p>合作写这篇文章很愉快。虽然还有很多工作需要做，但我们衷心希望你能享受阅读这篇Treebo的性能之旅:)可以在twitter上找到我俩<a href="https://medium.com/@addyosmani" title="Medium profile for @addyosmani" target="_blank" rel="external">@addyosmani</a>和<a href="https://medium.com/@__lakshya" title="Medium profile for @__lakshya" target="_blank" rel="external">@__lakshya</a>(是的，两个短下划线)我们希望听到你的想法。</p>
<p>感谢 <a href="https://twitter.com/@_zouhir" target="_blank" rel="external">_@<em>zouhir</em></a>, <a href="https://twitter.com/@_developit" target="_blank" rel="external">_@<em>developit</em></a> 和 <a href="https://twitter.com/@samccone" target="_blank" rel="external"><em>@samcccone</em></a><br>的校对和提议。</p>
<p>如果你是刚接触React，Wes Bos 写的<a href="https://goo.gl/G1WGxU" target="_blank" rel="external">React for Beginners</a>对于入门React是一篇全面的文章。</p>
<p>感谢<a href="https://medium.com/@developit?source=post_page" target="_blank" rel="external">Jason Miller</a>和<a href="https://medium.com/@__lakshya?source=post_page" target="_blank" rel="external">Lakshya Ranganath</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React的License事件闹的沸沸扬扬，最终以facebook修改协议的妥协收场。&lt;br&gt;不过那时候的第一备选方案Preact，在PWA的应用中又有怎样的优势呢&lt;br&gt;
    
    </summary>
    
      <category term="翻译" scheme="ejayyoung.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React" scheme="ejayyoung.github.io/tags/React/"/>
    
      <category term="PWA" scheme="ejayyoung.github.io/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>下划线是否破坏可读性？ | UX Booth [译文]</title>
    <link href="ejayyoung.github.io/2017/09/09/%E4%B8%8B%E5%88%92%E7%BA%BF%E6%98%AF%E5%90%A6%E7%A0%B4%E5%9D%8F%E5%8F%AF%E8%AF%BB%E6%80%A7%EF%BC%9F-UX-Booth/"/>
    <id>ejayyoung.github.io/2017/09/09/下划线是否破坏可读性？-UX-Booth/</id>
    <published>2017-09-09T06:03:25.000Z</published>
    <updated>2017-12-01T14:57:00.700Z</updated>
    
    <content type="html"><![CDATA[<p>链接的下划线对我们来说都是很熟悉了，为什么有的设计中需要，有的设计中不需要，本文可以帮助你从视觉和交互的角度来了解其中的奥秘！<a id="more"></a></p>
<p>原文：<a href="http://www.uxbooth.com/articles/is-the-underlined-link-hurting-readability/" target="_blank" rel="external">http://www.uxbooth.com/articles/is-the-underlined-link-hurting-readability/</a></p>
<p>在非常早期的互联网，链接就已经是一个基础的交互元素了。直到现在仍然非常流行：研究表明链接是人们在上网时最流行的操作之一。在过去的30年里，设计师们尝试过设计各式各样的链接，但有一点不会变：下划线。那个蓝色的带下划线的超链接是互联网中最明确并且最好理解的习惯之一。</p>
<blockquote>
<p><strong>万维网</strong> 包含了文档和链接。” - Tim Berners-Lee, 1991</p>
</blockquote>
<p>译者注：蒂姆·伯纳斯-李（Tim Berners-Lee）是万维网（World Wide Web）的发明者，1990年12月25日，他成功利用互联网实现了HTTP客户端与服务器的第一次通讯。 摘自<a href="https://zh.wikipedia.org/wiki/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E" target="_blank" rel="external">蒂姆·伯纳斯-李 维基百科</a></p>
<p>链接在互联网中扮演着中心角色，所以链接标记的视觉表现应该非常明显的影响用户体验和使用。但是随着设备和用户习惯的改变，<strong>下划线链接是否妨碍了而不是帮助了</strong>用户体验和易用性？目前看起来是简易有效的，但是一份<a href="https://vsis-www.informatik.uni-hamburg.de/getDoc.php/publications/119/www2003.pdf" target="_blank" rel="external">来自汉堡(德国)大学的研究</a>表明下划线对于可读性和设计也有不良影响。</p>
<p>按理说链接保持了用户浏览习惯的基础-我们总需要引入参考文献或者连接其他<a href="http://www.urbandictionary.com/define.php?term=cat%20videos" target="_blank" rel="external">互联网资源</a> (译者注： cat videos 在国外属于一种流行词，类似代表互联网(What the Internet is made of/ Universe))。然后随着互联网的变化和发展-依据设计的审美，代码弹性，用户体验习惯，和各种各样的设备-扪心自问一下：相比1991年我们现在是否应该丢弃下划线链接？</p>
<h2 id="下划线是什么？"><a href="#下划线是什么？" class="headerlink" title="下划线是什么？"></a>下划线是什么？</h2><p>到底什么是下划线，并且下划线这个惯例是怎么形成的？网上最新的解释，维基百科定义的下划线，是“文字下面一条或多或少的水平线，使用(…)用来强调关键文字”。这个属性作为强调的方法仍然存在于下划线的数字表现形式中，但具有更广泛而不一定是积极的含义。博客<strong>排版指南</strong>中建议“<a href="http://practicaltypography.com/underlining.html" target="_blank" rel="external">不要使用下划线。永远都不要</a>”。在打印机时代留下的引用链接的陋习不再需要了，因为我们现在有其他可用的强调方法。<br><img src="http://p0.qhimg.com/t01db454e1517706f43.png" alt=""></p>
<blockquote>
<p>下划线是打印机时代一个枯燥的习惯，打印机没有粗体和斜体样式。所以强调文字唯一的方法就是回车，然后在文字下面标记下划线。这只是打印机时代技术缺陷的一个变通方案。</p>
</blockquote>
<p>那么链接如何成为蓝色带下划线的文字的代名词？ 由于网络远离打字文档，文本不再需要下划线来强调。 因此，下划线的意义被重新定义：如果点击，下划线的单词将用户重定向到相关资源。 为什么蓝色？ 这是一个历史事故：在Tim Berners-Lee的WWW浏览器原型时代，大多数电脑都限于16色显示屏（如果它们有颜色的话），蓝色是最接近黑色的颜色。虽然技术迅速发展，超链接依然保持着蓝色和下划线风格。</p>
<p><img src="http://p0.qhimg.com/t0198b61711f0066425.png" alt=""></p>
<blockquote>
<p><strong>译者注</strong>： 这张图片只是用来展示下划线的效果，google搜出来类似英语课文。由于上下文环境不对，所以目前解析不出来了 233  逃：）</p>
</blockquote>
<h2 id="下划线的好处"><a href="#下划线的好处" class="headerlink" title="下划线的好处"></a>下划线的好处</h2><p>有很多好理由证实为什么下划线依然保持在链接的视觉方面占主导地位。对于新手，它有很好的辨识度：在过去的30年里有多少交互元素依然保持着原来的风格？它吸引了人们在浏览文本时对链接的注意力，在视觉上也提示了你已经访问过的链接。这些视觉线索有助于增加点击量（所有踩过维基百科的坑的人都知道）</p>
<p>一些用户发现了下划线链接中断浏览的特性很有用；这样他们可以在页面上更轻松的找到重要或者有用的信息。Lee Munroe 在 Smashing 杂志中坦白的说：“记住，用户从来不会认真阅读，他们只会浏览。你以前可能听过，这是真的。<a href="https://www.smashingmagazine.com/2010/02/the-definitive-guide-to-styling-web-links/" target="_blank" rel="external">所以，让你的链接更明显一些</a>。”</p>
<p>常见的下划线链接可以给用户浏览或者总结提供一些有用的帮助，遵循 <a href="https://en.wikipedia.org/wiki/Steve_Krug" target="_blank" rel="external">Steve Krug</a> 的名句–“不要让我思考”。下划线链接在无障碍阅读也有所成效。色盲或者色弱的互联网用户可以无障碍识别带下划线的超链接，但不能单独面对有颜色区分的链接。</p>
<h2 id="负面的用户体验影响"><a href="#负面的用户体验影响" class="headerlink" title="负面的用户体验影响"></a>负面的用户体验影响</h2><p>但是这些加分项并不能让下划线链接免受替代或者吐槽，尤其是UX时代的到来。在2014年，互联网巨头谷歌做出了历史性的决定，<a href="http://www.theverge.com/2014/3/13/5503894/google-removes-underlined-links-site-redesign" target="_blank" rel="external">不再使用下划线链接</a>。根据首席设计师 Jon Wiley 的说法，谷歌为了支持链接色彩区分化而在它的搜索引擎（SERP）中摒弃下划线，对于“改善可读性并创建一个整体简洁的外观”至关重要。即使用户在使用谷歌的SERP中有需要链接的必要场景，一些大型的阅读网站也慢慢放弃链接了。例如，NNGroup 已经放弃了下划线，并且发表了一篇关于<a href="https://www.nngroup.com/articles/clickable-elements/" target="_blank" rel="external">超链接样式</a>的文章。</p>
<p><img src="http://p0.qhimg.com/t01c3b50cde407497e0.png" alt=""></p>
<p>谷歌提及改善可读性意味着易用性和整体体验都受到下划线链接的负面影响。依据2003年汉堡大学的研究发现，在不同的链接视觉效果测试中，下划线确实在可读性和全局内容理解上得分最低。链接文本可读性更差并且更难识别出链接的文字。那篇论文指出，虽然“链接标记就是折中的设计”，但是下划线貌似是可读性折中设计里最致命的一点。</p>
<p>当然，在界面审美和视觉设计方面，下划线是一个折中的设计。根据<a href="http://www.awwwards.com/websites/minimal/" target="_blank" rel="external">Awwwards</a>或者 <a href="http://www.creativebloq.com/web-design/25-websites-use-minimalism-91516685" target="_blank" rel="external">Creative Bloq</a>里所说的，在众多的“优秀极简网站”中，几乎很少使用下划线。我们该如何避免这种折中的设计呢？</p>
<h2 id="链接的替代和改进方案"><a href="#链接的替代和改进方案" class="headerlink" title="链接的替代和改进方案"></a>链接的替代和改进方案</h2><p>在给网站设计超链接时，设计师有机会改进现有的惯例，或者尝试其他替代方案。其中一个不会脱离现有标准太远的方案是改善蓝色的明暗度。但是，如果设计师想要更极端的方案，则可以考虑的替代方案是根据需求显示链接或者替换色彩，这两种方案都在汉堡大学的研究中都表现不错。</p>
<h3 id="链接颜色"><a href="#链接颜色" class="headerlink" title="链接颜色"></a>链接颜色</h3><p>在决定链接颜色时，设计师必须考虑颜色对比度，并注意色盲用户。 为了适应所有用户，链接应该与黑色文本保持3：1的对比度，与白色背景保持4:5:1对比度。 幸运的是，有许多工具（包括Adobe Illustrator的内置视图）可以复制一些色盲形式。（译者注：这块有点太专业，实在理解不了 replicate some forms of color blindness：）） 当设计师确定设计符合标准时，这是非常重要的。 Webaim是一个致力于帮助设计师为所有人设计网站的组织，建议如果链接没有被下划线标记，他们应该至少有一些“非颜色指示符”，以便用户可以识别链接，即使他们有视觉障碍。</p>
<p><img src="http://p0.qhimg.com/t01ea71192677cf6e76.png" alt=""></p>
<p>如 Jakob Nielsen 所说，“假设链接文本是有颜色的，那就不一定需要用下划线标记”，但是<strong>强调链接是需要的</strong><br>As Jakob Nielsen says, “assuming the link text is colored, it’s not always absolutely necessary to underline it”, but <strong>it is always necessary to emphasize links in some way</strong>.</p>
<h3 id="根据需求展示链接-也称为-悬停（Hover）"><a href="#根据需求展示链接-也称为-悬停（Hover）" class="headerlink" title="根据需求展示链接 (也称为: 悬停（Hover）)"></a>根据需求展示链接 (也称为: 悬停（Hover）)</h3><p>显示或者隐藏链接需要用户将鼠标悬停在文本上才可以看到相关的样式。虽然这使网站看起来更简洁，但也带来了一些显著的缺陷。没有蓝色文字颜色或者下划线，用户被迫需要寻找链接，导致减少了链接的交互。触摸屏设备还有个问题：移动端用户无法悬停，也不会感谢你隐藏了它们，正如Hoa Loranger在她的NNGroup文章中的建议，“永远不要让用户依靠‘鼠标悬停’来确定文本是否可点击。人们不会花太多时间和精力来寻找链接的”。</p>
<p><img src="http://p0.qhimg.com/t013a9ac3625d5ff032.png" alt=""></p>
<h3 id="色彩覆盖-也称为：链接装饰"><a href="#色彩覆盖-也称为：链接装饰" class="headerlink" title="色彩覆盖 (也称为：链接装饰)"></a>色彩覆盖 (也称为：链接装饰)</h3><p>基于Hoa的建议，显示链接的存在是必要的。 但是，它必须是标准的蓝色，下划线的链接吗？ 安迪·罗特里奇（Andy Rutledge）讨论了下划线的一些小众的替代方案，例如“<a href="http://www.andyrutledge.com/styling-text-links.php" target="_blank" rel="external">各种边框类型/位置/配置，背景颜色/图片，甚至不太可取的装饰，如横穿线（line-through）</a>。”虽然这些可能会产生有趣的结果，并且可以适应某些品牌标识，但设计师必须考虑这种选择的可读性影响。</p>
<p><img src="http://p0.qhimg.com/t0120c2a0a50bf21e36.png" alt=""></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>没有必要按照惯例来使用下划线设计链接 - 毕竟，下划线有其缺陷和交互槽点 - 但是在视觉和交互方面需要优先考虑链接。考虑网站中链接的设计和易用性是有必要的。无论选择哪种方法，总有一些黄金准则适用于所有用户体验友好的链接视觉设计。</p>
<ul>
<li><p>不是链接的话就不要使用下划线</p>
</li>
<li><p>用不同的颜色来区分访问过和未访问过的链接</p>
</li>
<li><p>通过编写语义化的HTML来实现链接</p>
</li>
<li><p>给链接编写提示语，引导用户将会跳转（类似“点击此处”，避免误会）</p>
</li>
<li><p>保持链接文字简短，3-5个词就好</p>
</li>
<li><p>在整个网站上保持整体风格的一致性和完整性</p>
</li>
<li><p>在任何页面中都不要超过100个链接, <a href="https://www.mattcutts.com/blog/how-many-links-per-page/" target="_blank" rel="external">Matt Cutts 解释了为什么</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接的下划线对我们来说都是很熟悉了，为什么有的设计中需要，有的设计中不需要，本文可以帮助你从视觉和交互的角度来了解其中的奥秘！
    
    </summary>
    
      <category term="翻译" scheme="ejayyoung.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="UX" scheme="ejayyoung.github.io/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>Reflux 入门 TodoList</title>
    <link href="ejayyoung.github.io/2017/08/18/reflux-startup/"/>
    <id>ejayyoung.github.io/2017/08/18/reflux-startup/</id>
    <published>2017-08-18T14:08:49.000Z</published>
    <updated>2017-08-21T14:02:44.969Z</updated>
    
    <content type="html"><![CDATA[<p>学习Reflux已有三月有余，最近不忙便做个了小demo来校验下自己对于react,reflux的理解。<br><a href="https://github.com/eJayYoung/simple-react-reflux" target="_blank" rel="external">demo地址</a><a id="more"></a></p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/eJayYoung/simple-react-reflux.git</div><div class="line">npm install</div><div class="line">npm run <span class="literal">start</span></div></pre></td></tr></table></figure>
<h1 id="Demo-Show"><a href="#Demo-Show" class="headerlink" title="Demo Show"></a>Demo Show</h1><p> <img src="https://leanote.com/api/file/getImage?fileId=58be9476ab64411ece0083e2" alt="图片标题"></p>
<h2 id="Reflux是什么？"><a href="#Reflux是什么？" class="headerlink" title="Reflux是什么？"></a>Reflux是什么？</h2><p><a href="https://github.com/reflux/refluxjs" target="_blank" rel="external">官方文档在此</a></p>
<p>首先我们已经认识了React是一个通过数据来驱动页面渲染的View层，那么数据之间的通信就会随着应用的扩展变得越来越复杂，常见的数据通信模式有： </p>
<ul>
<li>父组件到子组件</li>
<li>子组件到父组件</li>
<li>祖父组件到孙组件</li>
<li>兄弟组件之间</li>
</ul>
<p>所以facebook提出了Flux架构的概念，随之而产生了许多类似实现的解决方法，最常见的就是 Redux和 Reflux 了。</p>
<h2 id="Reflux长啥样？"><a href="#Reflux长啥样？" class="headerlink" title="Reflux长啥样？"></a>Reflux长啥样？</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>       <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>       <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span></div><div class="line"><span class="comment">¦</span> <span class="comment">Actions</span> <span class="comment">¦</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">¦</span> <span class="comment">Stores</span> <span class="comment">¦</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">¦</span> <span class="comment">View</span> <span class="comment">Components</span> <span class="comment">¦</span></div><div class="line"><span class="comment"></span><span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>       <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>       <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span></div><div class="line">     <span class="comment">^</span>                                      <span class="comment">¦</span></div><div class="line"><span class="comment"></span>     <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span></div></pre></td></tr></table></figure>
<p>先盗一张官网的图</p>
<p>Reflux分为三个部分：</p>
<ul>
<li><p>Action</p>
<p>  通过用户来触发事件（Publisher）</p>
</li>
<li><p>Store</p>
<ul>
<li>监听Action（Subscriber）</li>
<li>触发View更新页面 (Publisher)</li>
</ul>
</li>
<li>View<ul>
<li>监听Store的变化，及时更新页面(Subscriber)</li>
</ul>
</li>
</ul>
<p>这样我们就很清楚的知道我们要怎么做了</p>
<h2 id="简单实现Reflux的三个步骤"><a href="#简单实现Reflux的三个步骤" class="headerlink" title="简单实现Reflux的三个步骤"></a>简单实现Reflux的三个步骤</h2><p>首先目录结构为<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--components</div><div class="line"> <span class="string">|- doSomething</span></div><div class="line">  <span class="string">|- doSomething.jsx</span></div><div class="line">  <span class="string">|- actions.js</span></div><div class="line">  <span class="string">|- store.js</span></div></pre></td></tr></table></figure></p>
<h3 id="创建Action"><a href="#创建Action" class="headerlink" title="创建Action"></a>创建Action</h3><p>Action的定义方法有两个：</p>
<ul>
<li><p>Reflux.createAction()</p>
<p>  作用：创建单个action</p>
<p>  函数接收的参数为一个对象</p>
  <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    actionName: 'myActionName', //action名字</div><div class="line">    children: ['childAction'], </div><div class="line">    //用于异步操作时创建子action</div><div class="line">    asyncResult: <span class="literal">true</span>,</div><div class="line">    //为<span class="literal">true</span>时会自动创建 `completed` 和 `failed` 两个子action，可以认为是设置子action的快捷方式</div><div class="line">    sync: <span class="literal">false</span>,</div><div class="line">    //为<span class="literal">true</span>时指定action的默认触发方式为同步</div><div class="line">    preEmit: function() <span class="meta">&#123;...&#125;</span></div><div class="line">    shouldEmit: function() <span class="meta">&#123;...&#125;</span>            </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Reflux.createActions()</p>
<p>  作用：顾名思义，创建多个action</p>
<p>  函数接收的参数为一个数组，里面的数组项为上面的对象</p>
<p>  当然最简单的方法只需要传入actionName即可</p>
  <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// actions.js</span></div><div class="line"></div><div class="line"><span class="keyword">module</span>.exports = Reflux.createActions([</div><div class="line">    <span class="string">'doSomething1'</span>,</div><div class="line">    <span class="string">'doSomething2'</span>,</div><div class="line">    ...</div><div class="line">]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建Store"><a href="#创建Store" class="headerlink" title="创建Store"></a>创建Store</h3><ul>
<li>Reflux.createStore()</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// store.js</span></div><div class="line"><span class="keyword">import</span> Actions from action;</div><div class="line">module.exports = Reflux.createStore(&#123;</div><div class="line">    init() &#123;</div><div class="line">        <span class="comment">//监听action 方法一</span></div><div class="line">        <span class="keyword">this</span>.listenTo(Actions.doSomething1);</div><div class="line">        <span class="keyword">this</span>.listenTo(Actions.doSomething2);</div><div class="line">        <span class="comment">//监听action 方法二</span></div><div class="line">        <span class="keyword">this</span>.listenToMany(Actions);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//监听action 方法三 (推荐)</span></div><div class="line">    listenables : [Actions],</div><div class="line">    <span class="keyword">data</span>: &#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//更新页面方法 给action前面加上 `on` 然后Action首字母大写</span></div><div class="line">    onDoSomething1() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    onDoSomething2() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    getInitialState() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">data</span></div><div class="line">    &#125;</div><div class="line">    updataComponent() &#123;</div><div class="line">        <span class="comment">//可以通过 trigger来更新state</span></div><div class="line">        <span class="keyword">this</span>.trigger(<span class="keyword">this</span>.<span class="keyword">data</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="View如何触发action-绑定Store"><a href="#View如何触发action-绑定Store" class="headerlink" title="View如何触发action,绑定Store"></a>View如何触发action,绑定Store</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> reactMixin <span class="keyword">from</span> <span class="string">'react-mixin'</span>;</div><div class="line"><span class="keyword">import</span> Actions <span class="keyword">from</span> <span class="string">'actions'</span>;</div><div class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">'store'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoSomething</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props)</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            list: []</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleClick() &#123;</div><div class="line">        Action.doSomething1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> me = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;div onClick=&#123;me.handleClick&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">            &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        );</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/通过Reflux.connect()来连接Store和View中的state </span></div><div class="line"><span class="regexp">reactMixin.onClass(DoSomething, Reflux.connet( Store, list]))</span></div></pre></td></tr></table></figure>
<p>这样我们就完成了最基本的 Reflux的实现。</p>
<h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>欢迎各路好汉火钳留<a href="https://github.com/eJayYoung/simple-react-reflux" target="_blank" rel="external">star</a>！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Reflux已有三月有余，最近不忙便做个了小demo来校验下自己对于react,reflux的理解。&lt;br&gt;&lt;a href=&quot;https://github.com/eJayYoung/simple-react-reflux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo地址&lt;/a&gt;
    
    </summary>
    
      <category term="技术" scheme="ejayyoung.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="ejayyoung.github.io/tags/javascript/"/>
    
      <category term="React" scheme="ejayyoung.github.io/tags/React/"/>
    
      <category term="Reflux" scheme="ejayyoung.github.io/tags/Reflux/"/>
    
  </entry>
  
  <entry>
    <title>Page Visibility API</title>
    <link href="ejayyoung.github.io/2017/08/18/Page-Visibility-API/"/>
    <id>ejayyoung.github.io/2017/08/18/Page-Visibility-API/</id>
    <published>2017-08-18T13:46:42.000Z</published>
    <updated>2017-12-01T14:53:41.635Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一次在线考试，觉得有个HTML5的API很有趣，便研究了一番。<br>主要用于浏览器切换tab标签页时会触发。<a id="more"></a></p>
<h2 id="visibilitychange事件"><a href="#visibilitychange事件" class="headerlink" title="visibilitychange事件"></a>visibilitychange事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>触发这个事件，会关联两个属性</p>
<h2 id="document-visibilityState"><a href="#document-visibilityState" class="headerlink" title="document.visibilityState"></a>document.visibilityState</h2><p>返回四种状态：</p>
<ul>
<li><strong>visible</strong><br>页面至少显示一部分，在实践中代表页面在非最小化窗口最前面的位置。</li>
<li><strong>hidden</strong><br>页面内容对用户是不可见的。<br>有三种情况：<ul>
<li>浏览器是最小化。（The User Agent is minimized.）</li>
<li>浏览器不是最小化，但是该页面在浏览器中的后台tab中，即不是当前选中可见窗口中。（The User Agent is not minimized, but the page is on a background tab.）</li>
<li>操作系统锁定屏幕显示。（The Operating System lock screen is shown.）</li>
</ul>
</li>
<li><strong>prerender</strong><br>正在prerendered页面内容和用户是不可见的(考虑隐藏document.hidden的目的)。文档可能会在这种状态下,但永远不会过渡到另一个值。注意:浏览器支持是可选的。</li>
<li><strong>unload</strong><br>页面被从内存中卸载。注意:浏览器支持是可选的。</li>
</ul>
<h2 id="document-hidden"><a href="#document-hidden" class="headerlink" title="document.hidden"></a>document.hidden</h2><p>返回 boolean 值， true 或者 false;<br>ture 时，表示页面已不在当前窗口<br>false 时， 表示页面正在当前窗口</p>
<h2 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.hidden !== <span class="string">"undefined"</span>) &#123; <span class="regexp">//</span> Opera <span class="number">12.10</span> <span class="keyword">and</span> Firefox <span class="number">18</span> <span class="keyword">and</span> later support </div><div class="line">  hidden = <span class="string">"hidden"</span>;</div><div class="line">  visibilityChange = <span class="string">"visibilitychange"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.msHidden !== <span class="string">"undefined"</span>) &#123;</div><div class="line">  hidden = <span class="string">"msHidden"</span>;</div><div class="line">  visibilityChange = <span class="string">"msvisibilitychange"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.webkitHidden !== <span class="string">"undefined"</span>) &#123;</div><div class="line">  hidden = <span class="string">"webkitHidden"</span>;</div><div class="line">  visibilityChange = <span class="string">"webkitvisibilitychange"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="兼容版本"><a href="#兼容版本" class="headerlink" title="兼容版本"></a>兼容版本</h2><ul>
<li>Chrome 13-33</li>
<li>FireFox 16，18</li>
<li>safari 7</li>
<li>Opera 12.10</li>
<li>IE10</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.w3.org/TR/2011/WD-page-visibility-20110602/" target="_blank" rel="external">W3C Page Visibility API</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="external">MDN Page Visibility API</a><br><a href="http://www.zhangxinxu.com/wordpress/2012/11/page-visibility-api-introduction-extend/" target="_blank" rel="external">Page Visibility(页面可见性) API介绍、微拓展</a></p>
<h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><p><a href="https://ejayyoung.github.io/page-visibility-demo/demo.html">https://ejayyoung.github.io/page-visibility-demo/demo.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一次在线考试，觉得有个HTML5的API很有趣，便研究了一番。&lt;br&gt;主要用于浏览器切换tab标签页时会触发。
    
    </summary>
    
      <category term="技术" scheme="ejayyoung.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="ejayyoung.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
