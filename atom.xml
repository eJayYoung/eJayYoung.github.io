<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪庐</title>
  <subtitle>逸杰的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ejayyoung.github.io/"/>
  <updated>2017-08-18T14:13:41.848Z</updated>
  <id>ejayyoung.github.io/</id>
  
  <author>
    <name>eJay Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reflux 入门 TodoList</title>
    <link href="ejayyoung.github.io/2017/08/18/reflux-startup/"/>
    <id>ejayyoung.github.io/2017/08/18/reflux-startup/</id>
    <published>2017-08-18T14:08:49.000Z</published>
    <updated>2017-08-18T14:13:41.848Z</updated>
    
    <content type="html"><![CDATA[<p>学习Reflux已有三月有余，最近不忙便做个了小demo来校验下自己对于react,reflux的理解。<br><a href="https://github.com/eJayYoung/simple-react-reflux" target="_blank" rel="external">demo地址</a><a id="more"></a></p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><pre><code>git clone https://github.com/eJayYoung/simple-react-reflux.git
npm install
npm run start
</code></pre><h1 id="Demo-Show"><a href="#Demo-Show" class="headerlink" title="Demo Show"></a>Demo Show</h1><p> <img src="https://leanote.com/api/file/getImage?fileId=58be9476ab64411ece0083e2" alt="图片标题"></p>
<h2 id="Reflux是什么？"><a href="#Reflux是什么？" class="headerlink" title="Reflux是什么？"></a>Reflux是什么？</h2><p><a href="https://github.com/reflux/refluxjs" target="_blank" rel="external">官方文档在此</a></p>
<p>首先我们已经认识了React是一个通过数据来驱动页面渲染的View层，那么数据之间的通信就会随着应用的扩展变得越来越复杂，常见的数据通信模式有： </p>
<ul>
<li>父组件到子组件</li>
<li>子组件到父组件</li>
<li>祖父组件到孙组件</li>
<li>兄弟组件之间</li>
</ul>
<p>所以facebook提出了Flux架构的概念，随之而产生了许多类似实现的解决方法，最常见的就是 Redux和 Reflux 了。</p>
<h2 id="Reflux长啥样？"><a href="#Reflux长啥样？" class="headerlink" title="Reflux长啥样？"></a>Reflux长啥样？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+---------+       +--------+       +-----------------+</div><div class="line">¦ Actions ¦------&gt;¦ Stores ¦------&gt;¦ View Components ¦</div><div class="line">+---------+       +--------+       +-----------------+</div><div class="line">     ^                                      ¦</div><div class="line">     +--------------------------------------+</div></pre></td></tr></table></figure>
<p>先盗一张官网的图</p>
<p>Reflux分为三个部分：</p>
<ul>
<li><p>Action</p>
<p>  通过用户来触发事件（Publisher）</p>
</li>
<li><p>Store</p>
<ul>
<li>监听Action（Subscriber）</li>
<li>触发View更新页面 (Publisher)</li>
</ul>
</li>
<li>View<ul>
<li>监听Store的变化，及时更新页面(Subscriber)</li>
</ul>
</li>
</ul>
<p>这样我们就很清楚的知道我们要怎么做了</p>
<h2 id="简单实现Reflux的三个步骤"><a href="#简单实现Reflux的三个步骤" class="headerlink" title="简单实现Reflux的三个步骤"></a>简单实现Reflux的三个步骤</h2><p>首先目录结构为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--components</div><div class="line"> |- doSomething</div><div class="line">  |- doSomething.jsx</div><div class="line">  |- actions.js</div><div class="line">  |- store.js</div></pre></td></tr></table></figure></p>
<ul>
<li><p>创建Action</p>
<p>  Action的定义方法有两个：</p>
<ul>
<li><p>Reflux.createAction()</p>
<p>  作用：创建单个action</p>
<p>  函数接收的参数为一个对象</p>
<pre><code>{
    actionName: &apos;myActionName&apos;, //action名字
    children: [&apos;childAction&apos;], 
    //用于异步操作时创建子action
    asyncResult: true,
    //为true时会自动创建 `completed` 和 `failed` 两个子action，可以认为是设置子action的快捷方式
    sync: false,
    //为true时指定action的默认触发方式为同步
    preEmit: function() {...}
    shouldEmit: function() {...}            
}
</code></pre></li>
<li><p>Reflux.createActions()</p>
<p>  作用：顾名思义，创建多个action</p>
<p>  函数接收的参数为一个数组，里面的数组项为上面的对象</p>
<p>当然最简单的方法只需要传入actionName即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// actions.js</div><div class="line"></div><div class="line">module.exports = Reflux.createActions([</div><div class="line">    &apos;doSomething1&apos;,</div><div class="line">    &apos;doSomething2&apos;,</div><div class="line">    ...</div><div class="line">]);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建Store</p>
<p>  Reflux.createStore()</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// store.js</div><div class="line">import Actions from action;</div><div class="line">module.exports = Reflux.createStore(&#123;</div><div class="line">    init() &#123;</div><div class="line">        //监听action 方法一</div><div class="line">        this.listenTo(Actions.doSomething1);</div><div class="line">        this.listenTo(Actions.doSomething2);</div><div class="line">        //监听action 方法二</div><div class="line">        this.listenToMany(Actions);</div><div class="line">    &#125;</div><div class="line">    //监听action 方法三 (推荐)</div><div class="line">    listenables : [Actions],</div><div class="line">    data: &#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    //更新页面方法 给action前面加上 `on` 然后Action首字母大写</div><div class="line">    onDoSomething1() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    onDoSomething2() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    getInitialState() &#123;</div><div class="line">        return this.data</div><div class="line">    &#125;</div><div class="line">    updataComponent() &#123;</div><div class="line">        //可以通过 trigger来更新state</div><div class="line">        this.trigger(this.data);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">- View如何触发action,绑定Store</div></pre></td></tr></table></figure>
<p>import reactMixin from ‘react-mixin’;<br>import Actions from ‘actions’;<br>import Store from ‘store’;</p>
<p>class DoSomething extends React.Component {<br>    constructor(props) {<br>        super(props)<br>        this.state = {<br>            list: []<br>        };<br>    }</p>
<pre><code>handleClick() {
    Action.doSomething1();
}

render() {
    const me = this;
    return (
        &lt;div&gt;
            &lt;div onClick={me.handleClick}&gt;&lt;/div&gt;
        &lt;/div&gt;
    );
}
</code></pre><p>}<br>//通过Reflux.connect()来连接Store和View中的state<br>reactMixin.onClass(DoSomething, Reflux.connet( Store, list]))<br>```</p>
<p>这样我们就完成了最基本的 Reflux的实现。</p>
<h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>欢迎各路好汉火钳留<a href="https://github.com/eJayYoung/simple-react-reflux" target="_blank" rel="external">star</a>！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Reflux已有三月有余，最近不忙便做个了小demo来校验下自己对于react,reflux的理解。&lt;br&gt;&lt;a href=&quot;https://github.com/eJayYoung/simple-react-reflux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo地址&lt;/a&gt;
    
    </summary>
    
    
      <category term="React" scheme="ejayyoung.github.io/tags/React/"/>
    
      <category term="javascript" scheme="ejayyoung.github.io/tags/javascript/"/>
    
      <category term="Reflux" scheme="ejayyoung.github.io/tags/Reflux/"/>
    
  </entry>
  
  <entry>
    <title>Page Visibility API</title>
    <link href="ejayyoung.github.io/2017/08/18/Page-Visibility-API/"/>
    <id>ejayyoung.github.io/2017/08/18/Page-Visibility-API/</id>
    <published>2017-08-18T13:46:42.000Z</published>
    <updated>2017-08-18T14:06:31.836Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一次在线考试，觉得有个HTML5的API很有趣，便研究了一番。<br>主要用于浏览器切换tab标签页时会触发。<a id="more"></a></p>
<h2 id="visibilitychange事件"><a href="#visibilitychange事件" class="headerlink" title="visibilitychange事件"></a>visibilitychange事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.addEventListener(&quot;visibilitychange&quot;, function(e) &#123;&#125;, false);</div></pre></td></tr></table></figure>
<p>触发这个事件，会关联两个属性</p>
<h2 id="document-visibilityState"><a href="#document-visibilityState" class="headerlink" title="document.visibilityState"></a>document.visibilityState</h2><p>返回四种状态：</p>
<ul>
<li><strong>visible</strong><br>页面至少显示一部分，在实践中代表页面在非最小化窗口最前面的位置。</li>
<li><strong>hidden</strong><br>页面内容对用户是不可见的。<br>有三种情况：<ul>
<li>浏览器是最小化。（The User Agent is minimized.）</li>
<li>浏览器不是最小化，但是该页面在浏览器中的后台tab中，即不是当前选中可见窗口中。（The User Agent is not minimized, but the page is on a background tab.）</li>
<li>操作系统锁定屏幕显示。（The Operating System lock screen is shown.）</li>
</ul>
</li>
<li><strong>prerender</strong><br>正在prerendered页面内容和用户是不可见的(考虑隐藏document.hidden的目的)。文档可能会在这种状态下,但永远不会过渡到另一个值。注意:浏览器支持是可选的。</li>
<li><strong>unload</strong><br>页面被从内存中卸载。注意:浏览器支持是可选的。</li>
</ul>
<h2 id="document-hidden"><a href="#document-hidden" class="headerlink" title="document.hidden"></a>document.hidden</h2><p>返回 boolean 值， true 或者 false;<br>ture 时，表示页面已不在当前窗口<br>false 时， 表示页面正在当前窗口</p>
<h2 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if (typeof document.hidden !== &quot;undefined&quot;) &#123; // Opera 12.10 and Firefox 18 and later support </div><div class="line">  hidden = &quot;hidden&quot;;</div><div class="line">  visibilityChange = &quot;visibilitychange&quot;;</div><div class="line">&#125; else if (typeof document.msHidden !== &quot;undefined&quot;) &#123;</div><div class="line">  hidden = &quot;msHidden&quot;;</div><div class="line">  visibilityChange = &quot;msvisibilitychange&quot;;</div><div class="line">&#125; else if (typeof document.webkitHidden !== &quot;undefined&quot;) &#123;</div><div class="line">  hidden = &quot;webkitHidden&quot;;</div><div class="line">  visibilityChange = &quot;webkitvisibilitychange&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="兼容版本"><a href="#兼容版本" class="headerlink" title="兼容版本"></a>兼容版本</h2><ul>
<li>Chrome 13-33</li>
<li>FireFox 16，18</li>
<li>safari 7</li>
<li>Opera 12.10</li>
<li>IE10</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.w3.org/TR/2011/WD-page-visibility-20110602/" target="_blank" rel="external">W3C Page Visibility API</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="external">MDN Page Visibility API</a><br><a href="http://www.zhangxinxu.com/wordpress/2012/11/page-visibility-api-introduction-extend/" target="_blank" rel="external">Page Visibility(页面可见性) API介绍、微拓展</a></p>
<h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><p><a href="https://ejayyoung.github.io/page-visibility-demo/demo.html">https://ejayyoung.github.io/page-visibility-demo/demo.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一次在线考试，觉得有个HTML5的API很有趣，便研究了一番。&lt;br&gt;主要用于浏览器切换tab标签页时会触发。
    
    </summary>
    
    
      <category term="javascript" scheme="ejayyoung.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
